["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "],"~$RegExp",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa.sysprops","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^>","~$r","~$reagent.core","^?","^?","~$http","~$cljs-http.client","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^>"],"~:defs",["^ ","~$eval-in-backend",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/sysprops.cljs","~:line",10,"~:column",7,"~:end-line",10,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^O",[["~$source-string"]]]]],"~:doc","Asynchronuously evaluates `source-string` in the backend JVM via\n  web-service `POST ws/eval/` (see `solo.spa/eval-string`)."],"^:","~$solo.spa.sysprops/eval-in-backend","~:variadic",false,"^I","src/cljs/solo/spa/sysprops.cljs","^M",22,"~:method-params",["^O",[["^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"^J",10,"^L",10,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^R","Asynchronuously evaluates `source-string` in the backend JVM via\n  web-service `POST ws/eval/` (see `solo.spa/eval-string`)."],"~$reg-ex-str->reg-ex",["^ ","^G",null,"^H",["^ ","^I","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/sysprops.cljs","^J",26,"^K",7,"^L",26,"^M",25,"^N",["^O",["^P",["^O",[["~$reg-ex-str"]]]]]],"^:","~$solo.spa.sysprops/reg-ex-str->reg-ex","^T",false,"^I","src/cljs/solo/spa/sysprops.cljs","^M",25,"^U",["^O",[["^["]]],"^V",null,"^W",["^O",[null,null]],"^K",1,"^J",26,"^L",26,"^X",1,"^Y",true,"^N",["^O",["^P",["^O",[["^["]]]]]],"~$get-properties",["^ ","^G",null,"^H",["^ ","^I","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/sysprops.cljs","^J",34,"^K",7,"^L",34,"^M",21,"^N",["^O",["^P",["^O",[[]]]]],"^R","Returns the system properties of the JVM backend as a `[name\n  value]`-seq (both strings)."],"^:","~$solo.spa.sysprops/get-properties","^T",false,"^I","src/cljs/solo/spa/sysprops.cljs","^M",21,"^U",["^O",[[]]],"^V",null,"^W",["^O",[null,null]],"^K",1,"^J",34,"^L",34,"^X",0,"^Y",true,"^N",["^O",["^P",["^O",[[]]]]],"^R","Returns the system properties of the JVM backend as a `[name\n  value]`-seq (both strings)."],"~$set-property",["^ ","^G",null,"^H",["^ ","^I","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/sysprops.cljs","^J",46,"^K",7,"^L",46,"^M",19,"^N",["^O",["^P",["^O",[["~$name","~$value"]]]]],"^R","Asynchronuously sets the system property in the JVM backend."],"^:","~$solo.spa.sysprops/set-property","^T",false,"^I","src/cljs/solo/spa/sysprops.cljs","^M",19,"^U",["^O",[["^14","^15"]]],"^V",null,"^W",["^O",[null,null]],"^K",1,"^J",46,"^L",46,"^X",2,"^Y",true,"^N",["^O",["^P",["^O",[["^14","^15"]]]]],"^R","Asynchronuously sets the system property in the JVM backend."],"~$clear-property",["^ ","^G",null,"^H",["^ ","^I","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/sysprops.cljs","^J",52,"^K",7,"^L",52,"^M",21,"^N",["^O",["^P",["^O",[["^14"]]]]],"^R","Asynchronuously clears the system property in the JVM backend."],"^:","~$solo.spa.sysprops/clear-property","^T",false,"^I","src/cljs/solo/spa/sysprops.cljs","^M",21,"^U",["^O",[["^14"]]],"^V",null,"^W",["^O",[null,null]],"^K",1,"^J",52,"^L",52,"^X",1,"^Y",true,"^N",["^O",["^P",["^O",[["^14"]]]]],"^R","Asynchronuously clears the system property in the JVM backend."],"~$sysprops-component",["^ ","^G",null,"^H",["^ ","^I","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/sysprops.cljs","^J",60,"^K",7,"^L",60,"^M",25,"^N",["^O",["^P",["^O",[[]]]]],"^R","Self-contained Reagent component for accessing the system\n  properties in a JVM backend.\n\n  The component displays a table with rows (name and value), it\n  supports re-find-filtering rows by name and value, clearing and\n  changing existing properties and entering new properties.\n\n  The component carries its own state with:\n\n  :data                 : sorted/ordered [name value]-seq of system properties\n  :filter-names-reg-ex  : reg-ex-string for filtering rows by name\n  :filter-values-reg-ex : reg-ex-string for filtering rows by value\n  :selected-name        : mouse-over _selects_ a row and sets :selected-name to the row's name/key!\n  :mode                 : :create : enter a property name and value; :update : change a property's value\n  :property-name        : for :create/:update\n  :property-value       : for :create/:update\n  \n  :editing              : property name when `EDIT` was clicked\n\n  :value                : property value that is entered when `editing` and 'adding'\n  :new-property         : if non-nil in 'adding' mode. Will carry new property name."],"^:","~$solo.spa.sysprops/sysprops-component","^T",false,"^I","src/cljs/solo/spa/sysprops.cljs","^M",25,"^U",["^O",[[]]],"^V",null,"^W",["^O",[null,null]],"^K",1,"^J",60,"^L",60,"^X",0,"^Y",true,"^N",["^O",["^P",["^O",[[]]]]],"^R","Self-contained Reagent component for accessing the system\n  properties in a JVM backend.\n\n  The component displays a table with rows (name and value), it\n  supports re-find-filtering rows by name and value, clearing and\n  changing existing properties and entering new properties.\n\n  The component carries its own state with:\n\n  :data                 : sorted/ordered [name value]-seq of system properties\n  :filter-names-reg-ex  : reg-ex-string for filtering rows by name\n  :filter-values-reg-ex : reg-ex-string for filtering rows by value\n  :selected-name        : mouse-over _selects_ a row and sets :selected-name to the row's name/key!\n  :mode                 : :create : enter a property name and value; :update : change a property's value\n  :property-name        : for :create/:update\n  :property-value       : for :create/:update\n  \n  :editing              : property name when `EDIT` was clicked\n\n  :value                : property value that is entered when `editing` and 'adding'\n  :new-property         : if non-nil in 'adding' mode. Will carry new property name."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^7","^7","^>","^>","~$r","^?","^?","^?"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:thead","~:tbody","~:table","~:key","~:placeholder","~:else","~:float","~:create","~:td","~:value","~:th","~:tr","~:default-value","~:mode","~:property-value","~:recur","~:type","~:update","~:filter-values-reg-ex","~:on-click","~:style","~:textarea","~:filter-names-reg-ex","~:property-name","~:query-params","~:on-mouse-over","~:div>input","~:input","~:on-change","~:body","~:selected-name","~:span","~:data","~:eval"]],"~:order",["^1W","^24","^20","^1N","^1D","^23","^1A","^1?","^1J","^1I","^22","^1S","^1E","^1Z","^1O","^1H","^1R","^1L","^1F","^1V","^1M","^1Y","^1C","^1[","^1U","^1Q","^1@","^1X","^21","^1G","^1P","^1T","^1K","^1B"]],"^R",null]