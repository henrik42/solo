["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^C","~$r","~$reagent.core","^D","^D","~$http","~$cljs-http.client","^F","^F","~$sysprops","~$solo.spa.sysprops","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^C"],"~:defs",["^ ","~$navigation-widget",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",287,"~:column",7,"~:end-line",287,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^V",[[]]]]]],"^?","~$solo.spa/navigation-widget","~:variadic",false,"^P","src/cljs/solo/spa.cljs","^T",24,"~:method-params",["^V",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"^Q",287,"^S",287,"~:max-fixed-arity",0,"~:fn-var",true,"^U",["^V",["^W",["^V",[[]]]]]],"~$set-log-level-form",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",169,"^R",7,"^S",169,"^T",25,"^U",["^V",["^W",["^V",[[]]]]],"~:doc","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^?","~$solo.spa/set-log-level-form","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",25,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",169,"^S",169,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",298,"^R",7,"^S",298,"^T",11,"^U",["^V",["^W",["^V",[[]]]]],"^14","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^?","~$solo.spa/main","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",11,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",298,"^S",298,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^4",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",17,"^R",7,"^S",17,"^T",10,"^U",["^V",["^W",["^V",[["~$&","~$xs"]]]]],"^14","Prints `xs` to `js/console`.","~:top-fn",["^ ","^Y",true,"^11",0,"^Z",[["^V",["^18"]]],"^U",["^V",[["~$&","^18"]]],"^10",["^V",[null]]]],"^?","~$solo.spa/log","^Y",true,"^P","src/cljs/solo/spa.cljs","^T",10,"^19",["^ ","^Y",true,"^11",0,"^Z",[["^V",["^18"]]],"^U",["^V",[["~$&","^18"]]],"^10",["^V",[null]]],"^Z",[["^V",["^18"]]],"^[",null,"^10",["^V",[null]],"^R",1,"^Q",17,"^S",17,"^11",0,"^12",true,"^U",["^V",[["~$&","^18"]]],"^14","Prints `xs` to `js/console`."],"~$current-page",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",276,"^R",7,"^S",276,"^T",19,"^U",["^V",["^W",["^V",[[]]]]]],"^?","~$solo.spa/current-page","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",19,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",276,"^S",276,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]]],"~$set-hide!",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",83,"^R",7,"^S",83,"^T",16,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^14","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-hide!","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",16,"^Z",["^V",[["~$x"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",83,"^S",83,"^11",1,"^12",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^14","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",95,"^R",7,"^S",95,"^T",14,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^?","~$solo.spa/loggers","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",14,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",95,"^S",95,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",218,"^R",7,"^S",218,"^T",19,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^?","~$solo.spa/loggers-form","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",19,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",218,"^S",218,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",111,"^R",7,"^S",111,"^T",27,"^U",["^V",["^W",["^V",[["~$&","~$_"]]]]],"^14","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing.","^19",["^ ","^Y",true,"^11",0,"^Z",[["^V",["~$_"]]],"^U",["^V",[["~$&","~$_"]]],"^10",["^V",[null]]]],"^?","~$solo.spa/load-current-loggers","^Y",true,"^P","src/cljs/solo/spa.cljs","^T",27,"^19",["^ ","^Y",true,"^11",0,"^Z",[["^V",["~$_"]]],"^U",["^V",[["~$&","~$_"]]],"^10",["^V",[null]]],"^Z",[["^V",["~$_"]]],"^[",null,"^10",["^V",[null]],"^R",1,"^Q",111,"^S",111,"^11",0,"^12",true,"^U",["^V",[["~$&","~$_"]]],"^14","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing."],"~$table-row",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",201,"^R",7,"^S",201,"^T",16,"^U",["^V",["^W",["^V",[["~$logger-name","~$log-level"]]]]],"^14","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(log-level-options\n  log-levels)` and value `log-level`. Selecting a log-level will fire\n  an event and call `set-log-level`."],"^?","~$solo.spa/table-row","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",16,"^Z",["^V",[["^1F","^1G"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",201,"^S",201,"^11",2,"^12",true,"^U",["^V",["^W",["^V",[["^1F","^1G"]]]]],"^14","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(log-level-options\n  log-levels)` and value `log-level`. Selecting a log-level will fire\n  an event and call `set-log-level`."],"~$log-levels",["^ ","^?","~$solo.spa/log-levels","^P","src/cljs/solo/spa.cljs","^Q",29,"^R",1,"^S",29,"^T",16,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",29,"^R",6,"^S",29,"^T",16],"^14","The set of all known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$any"],"~$reg-ex->str",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",56,"^R",7,"^S",56,"^T",18,"^U",["^V",["^W",["^V",[["~$r"]]]]],"^14","Returns the `String` representation of the given reg-ex for\n  presentation."],"^?","~$solo.spa/reg-ex->str","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",18,"^Z",["^V",[["~$r"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",56,"^S",56,"^11",1,"^12",true,"^U",["^V",["^W",["^V",[["~$r"]]]]],"^14","Returns the `String` representation of the given reg-ex for\n  presentation."],"~$set-filter-reg-ex!",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",64,"^R",7,"^S",64,"^T",25,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^14","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-filter-reg-ex!","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",25,"^Z",["^V",[["~$x"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",64,"^S",64,"^11",1,"^12",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^14","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"~$top-of-page",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",154,"^R",7,"^S",154,"^T",18,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"^?","~$solo.spa/top-of-page","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",18,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",154,"^S",154,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"~$hide?",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",76,"^R",7,"^S",76,"^T",12,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^?","~$solo.spa/hide?","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",12,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",76,"^S",76,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",47,"^R",7,"^S",47,"^T",20,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^?","~$solo.spa/filter-reg-ex","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",20,"^Z",["^V",[[]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",47,"^S",47,"^11",0,"^12",true,"^U",["^V",["^W",["^V",[[]]]]],"^14","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$log-level-options",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",134,"^R",7,"^S",134,"^T",24,"^U",["^V",["^W",["^V",[["^18"]]]]],"^14","Reagent `:option` component. Entries which are in `non-log-levels`\n  will be `disabled`."],"^?","~$solo.spa/log-level-options","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",24,"^Z",["^V",[["^18"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",134,"^S",134,"^11",1,"^12",true,"^U",["^V",["^W",["^V",[["^18"]]]]],"^14","Reagent `:option` component. Entries which are in `non-log-levels`\n  will be `disabled`."],"~$navigate-to",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",284,"^R",7,"^S",284,"^T",18,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^?","~$solo.spa/navigate-to","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",18,"^Z",["^V",[["~$p"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",284,"^S",284,"^11",1,"^12",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$app-state",["^ ","^?","~$solo.spa/app-state","^P","src/cljs/solo/spa.cljs","^Q",40,"^R",1,"^S",40,"^T",19,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",40,"^R",10,"^S",40,"^T",19],"^1K","^1L"],"~$non-log-levels",["^ ","^?","~$solo.spa/non-log-levels","^P","src/cljs/solo/spa.cljs","^Q",23,"^R",1,"^S",23,"^T",20,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",23,"^R",6,"^S",23,"^T",20],"^14","Log-Levels that are needed for presenting log-levels for loggers\n  with `UNKNOWN!` log-level and for log-levels that are `NOT-SET!`.","^1K","~$cljs.core/ISet"],"~$set-log-level!",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",122,"^R",7,"^S",122,"^T",21,"^U",["^V",["^W",["^V",[["^1F","^1G"]]]]],"^14","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."],"^?","~$solo.spa/set-log-level!","^Y",false,"^P","src/cljs/solo/spa.cljs","^T",21,"^Z",["^V",[["^1F","^1G"]]],"^[",null,"^10",["^V",[null,null]],"^R",1,"^Q",122,"^S",122,"^11",2,"^12",true,"^U",["^V",["^W",["^V",[["^1F","^1G"]]]]],"^14","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^C","~$r","^D","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:thead","~:div#top-of-page","~:tbody","~:table","~:key","~:placeholder","~:disabled","~:else","~:log-level","~:tfoot>tr>td","~:float","~:td","~:value","~:th","~:tr","~:default-value","~:filter-reg-ex","~:div#main","~:recur","~:type","~:div#new-logger","~:on-click","~:hide","~:style","~:option","~:logger-name","~:for","~:log4j","~:sysprops","~:label","~:id","~:td>select","~:padding","~:checked","~:col-span","~:input","~:on-change","~:body","~:current-page","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2J","^2P","^2S","^2B","^37","^33","^2L","^2A","^2R","^2F","^2@","^2>","^2;","~:a","^35","^2N","^2W","^2T","^31","^2M","^2X","^2?","^38","^2Q","^2Z","^36","^2I","^2O","^2H","^2E","^2Y","^32","^2=","^2:","^2G","^2D","^2[","^2<","^2C","^30","^34","^2U","^2V","^2K"]],"^14","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]