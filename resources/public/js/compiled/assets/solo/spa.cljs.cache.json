["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^C","~$r","~$reagent.core","^D","^D","~$http","~$cljs-http.client","^F","^F"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^C"],"~:defs",["^ ","~$options",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",131,"~:column",7,"~:end-line",131,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^T",[["~$xs"]]]]],"~:doc","Reagent `:option` component."],"^?","~$solo.spa/options","~:variadic",false,"^N","src/cljs/solo/spa.cljs","^R",14,"~:method-params",["^T",[["^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"^O",131,"^Q",131,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Reagent `:option` component."],"~$set-log-level-form",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",156,"^P",7,"^Q",156,"^R",25,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^?","~$solo.spa/set-log-level-form","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",25,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",156,"^Q",156,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",242,"^P",7,"^Q",242,"^R",11,"^S",["^T",["^U",["^T",[[]]]]],"^W","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^?","~$solo.spa/main","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",11,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",242,"^Q",242,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^4",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",15,"^P",7,"^Q",15,"^R",10,"^S",["^T",["^U",["^T",[["~$&","^V"]]]]],"^W","Prints to `js/console`.","~:top-fn",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^V"]]],"^S",["^T",[["~$&","^V"]]],"^10",["^T",[null]]]],"^?","~$solo.spa/log","^Y",true,"^N","src/cljs/solo/spa.cljs","^R",10,"^17",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^V"]]],"^S",["^T",[["~$&","^V"]]],"^10",["^T",[null]]],"^Z",[["^T",["^V"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",15,"^Q",15,"^11",0,"^12",true,"^S",["^T",[["~$&","^V"]]],"^W","Prints to `js/console`."],"~$set-hide!",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",80,"^P",7,"^Q",80,"^R",16,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-hide!","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",16,"^Z",["^T",[["~$x"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",80,"^Q",80,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",92,"^P",7,"^Q",92,"^R",14,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^?","~$solo.spa/loggers","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",14,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",92,"^Q",92,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",199,"^P",7,"^Q",199,"^R",19,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^?","~$solo.spa/loggers-form","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",19,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",199,"^Q",199,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",108,"^P",7,"^Q",108,"^R",27,"^S",["^T",["^U",["^T",[["~$&","~$_"]]]]],"^W","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing.","^17",["^ ","^Y",true,"^11",0,"^Z",[["^T",["~$_"]]],"^S",["^T",[["~$&","~$_"]]],"^10",["^T",[null]]]],"^?","~$solo.spa/load-current-loggers","^Y",true,"^N","src/cljs/solo/spa.cljs","^R",27,"^17",["^ ","^Y",true,"^11",0,"^Z",[["^T",["~$_"]]],"^S",["^T",[["~$&","~$_"]]],"^10",["^T",[null]]],"^Z",[["^T",["~$_"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",108,"^Q",108,"^11",0,"^12",true,"^S",["^T",[["~$&","~$_"]]],"^W","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing."],"~$table-row",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",181,"^P",7,"^Q",181,"^R",16,"^S",["^T",["^U",["^T",[["~$logger-name","~$log-level"]]]]],"^W","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(options log-levels)`\n  and value `log-level`. Selecting a log-level will fire an event and\n  call `set-log-level`."],"^?","~$solo.spa/table-row","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",16,"^Z",["^T",[["^1B","^1C"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",181,"^Q",181,"^11",2,"^12",true,"^S",["^T",["^U",["^T",[["^1B","^1C"]]]]],"^W","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(options log-levels)`\n  and value `log-level`. Selecting a log-level will fire an event and\n  call `set-log-level`."],"~$log-levels",["^ ","^?","~$solo.spa/log-levels","^N","src/cljs/solo/spa.cljs","^O",27,"^P",1,"^Q",27,"^R",16,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",27,"^P",6,"^Q",27,"^R",16],"^W","The set of all known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$any"],"~$reg-ex->str",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",53,"^P",7,"^Q",53,"^R",18,"^S",["^T",["^U",["^T",[["~$r"]]]]],"^W","Returns the `String` representation of the given reg-ex for\n  presentation."],"^?","~$solo.spa/reg-ex->str","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",18,"^Z",["^T",[["~$r"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",53,"^Q",53,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["~$r"]]]]],"^W","Returns the `String` representation of the given reg-ex for\n  presentation."],"~$set-filter-reg-ex!",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",61,"^P",7,"^Q",61,"^R",25,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-filter-reg-ex!","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",25,"^Z",["^T",[["~$x"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",61,"^Q",61,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"~$top-of-page",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",142,"^P",7,"^Q",142,"^R",18,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"^?","~$solo.spa/top-of-page","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",18,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",142,"^Q",142,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"~$hide?",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",73,"^P",7,"^Q",73,"^R",12,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^?","~$solo.spa/hide?","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",12,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",73,"^Q",73,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",44,"^P",7,"^Q",44,"^R",20,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^?","~$solo.spa/filter-reg-ex","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",20,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",44,"^Q",44,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$app-state",["^ ","^?","~$solo.spa/app-state","^N","src/cljs/solo/spa.cljs","^O",38,"^P",1,"^Q",38,"^R",19,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",38,"^P",10,"^Q",38,"^R",19],"^1G","^1H"],"~$non-log-levels",["^ ","^?","~$solo.spa/non-log-levels","^N","src/cljs/solo/spa.cljs","^O",21,"^P",1,"^Q",21,"^R",20,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",21,"^P",6,"^Q",21,"^R",20],"^W","Log-Levels that are needed for presenting log-levels for loggers\n  with `UNKNOWN!` log-level and for log-levels that are `NOT-SET!`.","^1G","~$cljs.core/ISet"],"~$set-log-level!",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",119,"^P",7,"^Q",119,"^R",21,"^S",["^T",["^U",["^T",[["^1B","^1C"]]]]],"^W","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."],"^?","~$solo.spa/set-log-level!","^Y",false,"^N","src/cljs/solo/spa.cljs","^R",21,"^Z",["^T",[["^1B","^1C"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",119,"^Q",119,"^11",2,"^12",true,"^S",["^T",["^U",["^T",[["^1B","^1C"]]]]],"^W","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^C","~$r","^D","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:div#top-of-page","~:key","~:placeholder","~:disabled","~:else","~:log-level","~:float","~:td","~:value","~:th","~:tr","~:default-value","~:filter-reg-ex","~:div#main","~:recur","~:type","~:div#new-logger","~:on-click","~:hide","~:style","~:div","~:option","~:logger-name","~:for","~:label","~:id","~:padding","~:checked","~:table#loggers","~:input","~:on-change","~:body","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2>","^2D","^2H","^27","^2T","^2Q","^2@","^26","^2G","^23","^2:","^25","^22","~:a","^2R","^2B","^2J","^2I","^2O","^2A","^2K","^24","^2U","^2E","^2L","^2S","^2C","^2<","^29","^2P","^2F","^2N","^2;","^2=","^28","^2M","^2?"]],"^W","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]