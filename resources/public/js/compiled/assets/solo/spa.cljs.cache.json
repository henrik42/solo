["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$Object",["^ ","~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$alt!","^;"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$goog.dom","^C","~$dom","^C","~$hipo-i","~$hipo.interpreter","~$clojure.browser.repl","^G","~$cljs-http.client","^H","~$cljs.core.async","^I","~$events","~$goog.events","~$repl","^G","^K","^K","^F","^F","~$http","^H"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$timeout","^I","~$<!","^I","~$chan","^I","~$>!","^I","~$put!","^I"],"~:defs",["^ ","~$http-get",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",117,"~:column",7,"~:end-line",117,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^13",[["~$url"]]]]]],"^?","~$solo.spa/http-get","~:variadic",false,"^Y","src/cljs/solo/spa.cljs","^11",15,"~:method-params",["^13",[["^15"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^[",1,"^Z",117,"^10",117,"~:max-fixed-arity",1,"~:fn-var",true,"^12",["^13",["^14",["^13",[["^15"]]]]]],"~$set-log-level-form",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",56,"^[",7,"^10",56,"^11",25,"^12",["^13",["^14",["^13",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^?","~$solo.spa/set-log-level-form","^17",false,"^Y","src/cljs/solo/spa.cljs","^11",25,"^18",["^13",[[]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",56,"^10",56,"^1;",0,"^1<",true,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^4",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",24,"^[",7,"^10",24,"^11",10,"^12",["^13",["^14",["^13",[["~$&","~$xs"]]]]],"~:top-fn",["^ ","^17",true,"^1;",0,"^18",[["^13",["^1@"]]],"^12",["^13",[["~$&","^1@"]]],"^1:",["^13",[null]]]],"^?","~$solo.spa/log","^17",true,"^Y","src/cljs/solo/spa.cljs","^11",10,"^1A",["^ ","^17",true,"^1;",0,"^18",[["^13",["^1@"]]],"^12",["^13",[["~$&","^1@"]]],"^1:",["^13",[null]]],"^18",[["^13",["^1@"]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",24,"^10",24,"^1;",0,"^1<",true,"^12",["^13",[["~$&","^1@"]]]],"~$conn",["^ ","^?","~$solo.spa/conn","^Y","src/cljs/solo/spa.cljs","^Z",14,"^[",1,"^10",14,"^11",14,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",14,"^[",10,"^10",14,"^11",14],"~:tag","~$any"],"~$loggers-form",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",78,"^[",7,"^10",78,"^11",19,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^?","~$solo.spa/loggers-form","^17",false,"^Y","src/cljs/solo/spa.cljs","^11",19,"^18",["^13",[[]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",78,"^10",78,"^1;",0,"^1<",true,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",122,"^[",7,"^10",122,"^11",27,"^12",["^13",["^14",["^13",[["~$&","~$_"]]]]],"^1A",["^ ","^17",true,"^1;",0,"^18",[["^13",["~$_"]]],"^12",["^13",[["~$&","~$_"]]],"^1:",["^13",[null]]]],"^?","~$solo.spa/load-current-loggers","^17",true,"^Y","src/cljs/solo/spa.cljs","^11",27,"^1A",["^ ","^17",true,"^1;",0,"^18",[["^13",["~$_"]]],"^12",["^13",[["~$&","~$_"]]],"^1:",["^13",[null]]],"^18",[["^13",["~$_"]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",122,"^10",122,"^1;",0,"^1<",true,"^12",["^13",[["~$&","~$_"]]]],"~$log-levels",["^ ","^?","~$solo.spa/log-levels","^Y","src/cljs/solo/spa.cljs","^Z",27,"^[",1,"^10",27,"^11",16,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",27,"^[",6,"^10",27,"^11",16],"^1>","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","^1E","~$cljs.core/ISet"],"~$top-of-page",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",42,"^[",7,"^10",42,"^11",18,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^?","~$solo.spa/top-of-page","^17",false,"^Y","src/cljs/solo/spa.cljs","^11",18,"^18",["^13",[[]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",42,"^10",42,"^1;",0,"^1<",true,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$main!",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",132,"^[",7,"^10",132,"^11",12,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Main entry point of the SPA.\n\n  Call this function to create the DOM for the SPA and to populate and\n  render/mount the inital app-state at `id` `main`."],"^?","~$solo.spa/main!","^17",false,"^Y","src/cljs/solo/spa.cljs","^11",12,"^18",["^13",[[]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",132,"^10",132,"^1;",0,"^1<",true,"^12",["^13",["^14",["^13",[[]]]]],"^1>","Main entry point of the SPA.\n\n  Call this function to create the DOM for the SPA and to populate and\n  render/mount the inital app-state at `id` `main`."],"~$render-loggers",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",126,"^[",7,"^10",126,"^11",21,"^12",["^13",["^14",["^13",[["~$&","~$_"]]]]],"^1A",["^ ","^17",true,"^1;",0,"^18",[["^13",["~$_"]]],"^12",["^13",[["~$&","~$_"]]],"^1:",["^13",[null]]]],"^?","~$solo.spa/render-loggers","^17",true,"^Y","src/cljs/solo/spa.cljs","^11",21,"^1A",["^ ","^17",true,"^1;",0,"^18",[["^13",["~$_"]]],"^12",["^13",[["~$&","~$_"]]],"^1:",["^13",[null]]],"^18",[["^13",["~$_"]]],"^19",null,"^1:",["^13",[null]],"^[",1,"^Z",126,"^10",126,"^1;",0,"^1<",true,"^12",["^13",[["~$&","~$_"]]]],"~$app-state",["^ ","^?","~$solo.spa/app-state","^Y","src/cljs/solo/spa.cljs","^Z",21,"^[",1,"^10",21,"^11",15,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",21,"^[",6,"^10",21,"^11",15],"^1E","^1F"],"~$make-options",["^ ","^W",null,"^X",["^ ","^Y","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Z",33,"^[",7,"^10",33,"^11",19,"^12",["^13",["^14",["^13",[["^1@","~$x"]]]]],"^1>","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^?","~$solo.spa/make-options","^17",false,"^Y","src/cljs/solo/spa.cljs","^11",19,"^18",["^13",[["^1@","~$x"]]],"^19",null,"^1:",["^13",[null,null]],"^[",1,"^Z",33,"^10",33,"^1;",2,"^1<",true,"^12",["^13",["^14",["^13",[["^1@","~$x"]]]]],"^1>","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^;","^;","^I","^I"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:div#top-of-page","~:selected","~:placeholder","~:else","~:log-level","~:td","~:value","~:th","~:tr","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","~:label","~:id","~:checked","~:table#loggers","~:input","~:body","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2@","^21","^20","~:a","^2J","^2=","^2D","^2B","^2H","^2<","^2E","^22","^2M","^2?","^2K","^26","^2C","^2G","^28","^27","^2F","^2>","^2A","^24","^25","^2L","^2;","^23","^2I","^29","^2:"]],"^1>",null]