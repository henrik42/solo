["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "],"~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^D","~$hipo","~$hipo.interpreter","^F","^F","~$http","~$cljs-http.client","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^D"],"~:defs",["^ ","~$set-log-level-form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",135,"~:column",7,"~:end-line",135,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^V",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^@","~$solo.spa/set-log-level-form","~:variadic",false,"^P","src/cljs/solo/spa.cljs","^T",25,"~:method-params",["^V",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"^Q",135,"^S",135,"~:max-fixed-arity",0,"~:fn-var",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",210,"^R",7,"^S",210,"^T",11,"^U",["^V",["^W",["^V",[[]]]]],"^X","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^@","~$solo.spa/main","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",11,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",210,"^S",210,"^12",0,"^13",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^4",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",21,"^R",7,"^S",21,"^T",10,"^U",["^V",["^W",["^V",[["~$&","~$xs"]]]]],"^X","Prints to `js/console`.","~:top-fn",["^ ","^Z",true,"^12",0,"^[",[["^V",["^16"]]],"^U",["^V",[["~$&","^16"]]],"^11",["^V",[null]]]],"^@","~$solo.spa/log","^Z",true,"^P","src/cljs/solo/spa.cljs","^T",10,"^17",["^ ","^Z",true,"^12",0,"^[",[["^V",["^16"]]],"^U",["^V",[["~$&","^16"]]],"^11",["^V",[null]]],"^[",[["^V",["^16"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^Q",21,"^S",21,"^12",0,"^13",true,"^U",["^V",[["~$&","^16"]]],"^X","Prints to `js/console`."],"~$set-hide!",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",69,"^R",7,"^S",69,"^T",16,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^X","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^@","~$solo.spa/set-hide!","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",16,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",69,"^S",69,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^X","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",80,"^R",7,"^S",80,"^T",14,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^@","~$solo.spa/loggers","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",14,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",80,"^S",80,"^12",0,"^13",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",159,"^R",7,"^S",159,"^T",19,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^@","~$solo.spa/loggers-form","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",19,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",159,"^S",159,"^12",0,"^13",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",102,"^R",7,"^S",102,"^T",27,"^U",["^V",["^W",["^V",[["~$&","~$_"]]]]],"^17",["^ ","^Z",true,"^12",0,"^[",[["^V",["~$_"]]],"^U",["^V",[["~$&","~$_"]]],"^11",["^V",[null]]]],"^@","~$solo.spa/load-current-loggers","^Z",true,"^P","src/cljs/solo/spa.cljs","^T",27,"^17",["^ ","^Z",true,"^12",0,"^[",[["^V",["~$_"]]],"^U",["^V",[["~$&","~$_"]]],"^11",["^V",[null]]],"^[",[["^V",["~$_"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^Q",102,"^S",102,"^12",0,"^13",true,"^U",["^V",[["~$&","~$_"]]]],"~$log-levels",["^ ","^@","~$solo.spa/log-levels","^P","src/cljs/solo/spa.cljs","^Q",27,"^R",1,"^S",27,"^T",16,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",27,"^R",6,"^S",27,"^T",16],"^X","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$cljs.core/ISet"],"~$reg-ex->str",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",53,"^R",7,"^S",53,"^T",18,"^U",["^V",["^W",["^V",[["~$r"]]]]]],"^@","~$solo.spa/reg-ex->str","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",18,"^[",["^V",[["~$r"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",53,"^S",53,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[["~$r"]]]]]],"~$set-filter-reg-ex!",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",57,"^R",7,"^S",57,"^T",25,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"^@","~$solo.spa/set-filter-reg-ex!","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",25,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",57,"^S",57,"^12",1,"^13",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"~$top-of-page",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",121,"^R",7,"^S",121,"^T",18,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^@","~$solo.spa/top-of-page","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",18,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",121,"^S",121,"^12",0,"^13",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$hide?",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",62,"^R",7,"^S",62,"^T",12,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^@","~$solo.spa/hide?","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",12,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",62,"^S",62,"^12",0,"^13",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",44,"^R",7,"^S",44,"^T",20,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^@","~$solo.spa/filter-reg-ex","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",20,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",44,"^S",44,"^12",0,"^13",true,"^U",["^V",["^W",["^V",[[]]]]],"^X","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$render-loggers",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",201,"^R",16,"^S",201,"^T",30,"~:export",true,"^U",["^V",["^W",["^V",[["~$&","~$_"]]]]],"^X","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form.","^17",["^ ","^Z",true,"^12",0,"^[",[["^V",["~$_"]]],"^U",["^V",[["~$&","~$_"]]],"^11",["^V",[null]]]],"^@","~$solo.spa/render-loggers","^Z",true,"^P","src/cljs/solo/spa.cljs","^T",30,"^17",["^ ","^Z",true,"^12",0,"^[",[["^V",["~$_"]]],"^U",["^V",[["~$&","~$_"]]],"^11",["^V",[null]]],"^[",[["^V",["~$_"]]],"^10",null,"^1P",true,"^11",["^V",[null]],"^R",1,"^Q",201,"^S",201,"^12",0,"^13",true,"^U",["^V",[["~$&","~$_"]]],"^X","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form."],"~$app-state",["^ ","^@","~$solo.spa/app-state","^P","src/cljs/solo/spa.cljs","^Q",39,"^R",1,"^S",39,"^T",19,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",39,"^R",10,"^S",39,"^T",19],"^1C","~$any"],"~$set-log-level!",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",107,"^R",7,"^S",107,"^T",21,"^U",["^V",["^W",["^V",[["~$logger-name","~$log-level"]]]]]],"^@","~$solo.spa/set-log-level!","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",21,"^[",["^V",[["^1V","^1W"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",107,"^S",107,"^12",2,"^13",true,"^U",["^V",["^W",["^V",[["^1V","^1W"]]]]]],"~$make-options",["^ ","^N",null,"^O",["^ ","^P","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^Q",114,"^R",7,"^S",114,"^T",19,"^U",["^V",["^W",["^V",[["^16","~$x"]]]]],"^X","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^@","~$solo.spa/make-options","^Z",false,"^P","src/cljs/solo/spa.cljs","^T",19,"^[",["^V",[["^16","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^Q",114,"^S",114,"^12",2,"^13",true,"^U",["^V",["^W",["^V",[["^16","~$x"]]]]],"^X","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^=","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:div#top-of-page","~:selected","^A","~:placeholder","~:else","~:log-level","~:ns","^@","~:td","~:value","~:th","^P","~:tr","^T","~:filter-reg-ex","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","^1P","~:on-click","^R","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","^Q","~:label","~:id","~:checked","~:declared","^1O","^S","~:table#loggers","~:input","^U","~:on-change","~:body","^X","^1Q","~:test","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2?","^1Q","^28","^@","^P","^T","^1P","^R","^Q","^2M","^S","^U","^X","^2R","^A","^1O","^2=","^2D","^2G","^27","^26","^2U","^2Q","^2@","^2F","^24","^23","~:a","^2S","^2B","^2J","^2H","^2O","^2A","^2K","^25","^2V","^2E","^2T","^2C","^2:","^2I","^2N","^2<","^2;","^2P","^2L","^29","^2>"]],"^X","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]