["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^C","~$r","~$reagent.core","^D","^D","~$http","~$cljs-http.client","^F","^F"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^C"],"~:defs",["^ ","~$set-log-level-form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",165,"~:column",7,"~:end-line",165,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^T",[[]]]]],"~:doc","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^?","~$solo.spa/set-log-level-form","~:variadic",false,"^N","src/cljs/solo/spa.cljs","^R",25,"~:method-params",["^T",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"^O",165,"^Q",165,"~:max-fixed-arity",0,"~:fn-var",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",274,"^P",7,"^Q",274,"^R",11,"^S",["^T",["^U",["^T",[[]]]]],"^V","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^?","~$solo.spa/main","^X",false,"^N","src/cljs/solo/spa.cljs","^R",11,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",274,"^Q",274,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^4",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",15,"^P",7,"^Q",15,"^R",10,"^S",["^T",["^U",["^T",[["~$&","~$xs"]]]]],"^V","Prints to `js/console`.","~:top-fn",["^ ","^X",true,"^10",0,"^Y",[["^T",["^14"]]],"^S",["^T",[["~$&","^14"]]],"^[",["^T",[null]]]],"^?","~$solo.spa/log","^X",true,"^N","src/cljs/solo/spa.cljs","^R",10,"^15",["^ ","^X",true,"^10",0,"^Y",[["^T",["^14"]]],"^S",["^T",[["~$&","^14"]]],"^[",["^T",[null]]],"^Y",[["^T",["^14"]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",15,"^Q",15,"^10",0,"^11",true,"^S",["^T",[["~$&","^14"]]],"^V","Prints to `js/console`."],"~$set-hide!",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",80,"^P",7,"^Q",80,"^R",16,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-hide!","^X",false,"^N","src/cljs/solo/spa.cljs","^R",16,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",80,"^Q",80,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",92,"^P",7,"^Q",92,"^R",14,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^?","~$solo.spa/loggers","^X",false,"^N","src/cljs/solo/spa.cljs","^R",14,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",92,"^Q",92,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",215,"^P",7,"^Q",215,"^R",19,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^?","~$solo.spa/loggers-form","^X",false,"^N","src/cljs/solo/spa.cljs","^R",19,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",215,"^Q",215,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",108,"^P",7,"^Q",108,"^R",27,"^S",["^T",["^U",["^T",[["~$&","~$_"]]]]],"^V","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing.","^15",["^ ","^X",true,"^10",0,"^Y",[["^T",["~$_"]]],"^S",["^T",[["~$&","~$_"]]],"^[",["^T",[null]]]],"^?","~$solo.spa/load-current-loggers","^X",true,"^N","src/cljs/solo/spa.cljs","^R",27,"^15",["^ ","^X",true,"^10",0,"^Y",[["^T",["~$_"]]],"^S",["^T",[["~$&","~$_"]]],"^[",["^T",[null]]],"^Y",[["^T",["~$_"]]],"^Z",null,"^[",["^T",[null]],"^P",1,"^O",108,"^Q",108,"^10",0,"^11",true,"^S",["^T",[["~$&","~$_"]]],"^V","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing."],"~$table-row",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",197,"^P",7,"^Q",197,"^R",16,"^S",["^T",["^U",["^T",[["~$logger-name","~$log-level"]]]]],"^V","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(log-level-options\n  log-levels)` and value `log-level`. Selecting a log-level will fire\n  an event and call `set-log-level`."],"^?","~$solo.spa/table-row","^X",false,"^N","src/cljs/solo/spa.cljs","^R",16,"^Y",["^T",[["^1@","^1A"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",197,"^Q",197,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^1@","^1A"]]]]],"^V","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(log-level-options\n  log-levels)` and value `log-level`. Selecting a log-level will fire\n  an event and call `set-log-level`."],"~$log-levels",["^ ","^?","~$solo.spa/log-levels","^N","src/cljs/solo/spa.cljs","^O",27,"^P",1,"^Q",27,"^R",16,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",27,"^P",6,"^Q",27,"^R",16],"^V","The set of all known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$any"],"~$reg-ex->str",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",53,"^P",7,"^Q",53,"^R",18,"^S",["^T",["^U",["^T",[["~$r"]]]]],"^V","Returns the `String` representation of the given reg-ex for\n  presentation."],"^?","~$solo.spa/reg-ex->str","^X",false,"^N","src/cljs/solo/spa.cljs","^R",18,"^Y",["^T",[["~$r"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",53,"^Q",53,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$r"]]]]],"^V","Returns the `String` representation of the given reg-ex for\n  presentation."],"~$set-filter-reg-ex!",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",61,"^P",7,"^Q",61,"^R",25,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-filter-reg-ex!","^X",false,"^N","src/cljs/solo/spa.cljs","^R",25,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",61,"^Q",61,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^V","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"~$top-of-page",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",151,"^P",7,"^Q",151,"^R",18,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"^?","~$solo.spa/top-of-page","^X",false,"^N","src/cljs/solo/spa.cljs","^R",18,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",151,"^Q",151,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"~$hide?",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",73,"^P",7,"^Q",73,"^R",12,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^?","~$solo.spa/hide?","^X",false,"^N","src/cljs/solo/spa.cljs","^R",12,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",73,"^Q",73,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",44,"^P",7,"^Q",44,"^R",20,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^?","~$solo.spa/filter-reg-ex","^X",false,"^N","src/cljs/solo/spa.cljs","^R",20,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",44,"^Q",44,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^V","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$log-level-options",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",131,"^P",7,"^Q",131,"^R",24,"^S",["^T",["^U",["^T",[["^14"]]]]],"^V","Reagent `:option` component. Entries which are in `non-log-levels`\n  will be `disabled`."],"^?","~$solo.spa/log-level-options","^X",false,"^N","src/cljs/solo/spa.cljs","^R",24,"^Y",["^T",[["^14"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",131,"^Q",131,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^14"]]]]],"^V","Reagent `:option` component. Entries which are in `non-log-levels`\n  will be `disabled`."],"~$app-state",["^ ","^?","~$solo.spa/app-state","^N","src/cljs/solo/spa.cljs","^O",38,"^P",1,"^Q",38,"^R",19,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",38,"^P",10,"^Q",38,"^R",19],"^1E","^1F"],"~$non-log-levels",["^ ","^?","~$solo.spa/non-log-levels","^N","src/cljs/solo/spa.cljs","^O",21,"^P",1,"^Q",21,"^R",20,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",21,"^P",6,"^Q",21,"^R",20],"^V","Log-Levels that are needed for presenting log-levels for loggers\n  with `UNKNOWN!` log-level and for log-levels that are `NOT-SET!`.","^1E","~$cljs.core/ISet"],"~$set-log-level!",["^ ","^L",null,"^M",["^ ","^N","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^O",119,"^P",7,"^Q",119,"^R",21,"^S",["^T",["^U",["^T",[["^1@","^1A"]]]]],"^V","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."],"^?","~$solo.spa/set-log-level!","^X",false,"^N","src/cljs/solo/spa.cljs","^R",21,"^Y",["^T",[["^1@","^1A"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^O",119,"^Q",119,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^1@","^1A"]]]]],"^V","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^C","~$r","^D","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:thead","~:div#top-of-page","~:tbody","~:key","~:placeholder","~:disabled","~:else","~:log-level","~:float","~:td","~:value","~:th","~:tr","~:default-value","~:filter-reg-ex","~:div#main","~:recur","~:type","~:div#new-logger","~:tfoot","~:on-click","~:hide","~:style","~:div","~:option","~:logger-name","~:for","~:label","~:id","~:padding","~:checked","~:col-span","~:table#loggers","~:input","~:on-change","~:body","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2@","^2G","^2K","^29","^2X","^2U","^2B","^28","^2J","^2<","^27","^25","^23","~:a","^2V","^2D","^2M","^2L","^2S","^2C","^2N","^26","^2Y","^2H","^2O","^2W","^2?","^2F","^2>","^2;","^2T","^2I","^2R","^22","^2=","^2:","^2P","^24","^2E","^2Q","^2A"]],"^V","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]