["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "],"~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]],"~$Error",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^E","~$repl","~$clojure.browser.repl","^G","^G","~$hipo","~$hipo.interpreter","^I","^I","~$http","~$cljs-http.client","^K","^K"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^E"],"~:defs",["^ ","~$set-log-level-form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",135,"~:column",7,"~:end-line",135,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^Y",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^A","~$solo.spa/set-log-level-form","~:variadic",false,"^S","src/cljs/solo/spa.cljs","^W",25,"~:method-params",["^Y",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^U",1,"^T",135,"^V",135,"~:max-fixed-arity",0,"~:fn-var",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",210,"^U",7,"^V",210,"^W",11,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such a\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes."],"^A","~$solo.spa/main","^11",false,"^S","src/cljs/solo/spa.cljs","^W",11,"^12",["^Y",[[]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",210,"^V",210,"^15",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such a\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes."],"^4",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",21,"^U",7,"^V",21,"^W",10,"^X",["^Y",["^Z",["^Y",[["~$&","~$xs"]]]]],"^[","Prints to `js/console`.","~:top-fn",["^ ","^11",true,"^15",0,"^12",[["^Y",["^19"]]],"^X",["^Y",[["~$&","^19"]]],"^14",["^Y",[null]]]],"^A","~$solo.spa/log","^11",true,"^S","src/cljs/solo/spa.cljs","^W",10,"^1:",["^ ","^11",true,"^15",0,"^12",[["^Y",["^19"]]],"^X",["^Y",[["~$&","^19"]]],"^14",["^Y",[null]]],"^12",[["^Y",["^19"]]],"^13",null,"^14",["^Y",[null]],"^U",1,"^T",21,"^V",21,"^15",0,"^16",true,"^X",["^Y",[["~$&","^19"]]],"^[","Prints to `js/console`."],"~$set-hide!",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",69,"^U",7,"^V",69,"^W",16,"^X",["^Y",["^Z",["^Y",[["~$x"]]]]],"^[","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^A","~$solo.spa/set-hide!","^11",false,"^S","src/cljs/solo/spa.cljs","^W",16,"^12",["^Y",[["~$x"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",69,"^V",69,"^15",1,"^16",true,"^X",["^Y",["^Z",["^Y",[["~$x"]]]]],"^[","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",80,"^U",7,"^V",80,"^W",14,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^A","~$solo.spa/loggers","^11",false,"^S","src/cljs/solo/spa.cljs","^W",14,"^12",["^Y",[[]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",80,"^V",80,"^15",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",159,"^U",7,"^V",159,"^W",19,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^A","~$solo.spa/loggers-form","^11",false,"^S","src/cljs/solo/spa.cljs","^W",19,"^12",["^Y",[[]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",159,"^V",159,"^15",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",102,"^U",7,"^V",102,"^W",27,"^X",["^Y",["^Z",["^Y",[["~$&","~$_"]]]]],"^1:",["^ ","^11",true,"^15",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^14",["^Y",[null]]]],"^A","~$solo.spa/load-current-loggers","^11",true,"^S","src/cljs/solo/spa.cljs","^W",27,"^1:",["^ ","^11",true,"^15",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^14",["^Y",[null]]],"^12",[["^Y",["~$_"]]],"^13",null,"^14",["^Y",[null]],"^U",1,"^T",102,"^V",102,"^15",0,"^16",true,"^X",["^Y",[["~$&","~$_"]]]],"~$log-levels",["^ ","^A","~$solo.spa/log-levels","^S","src/cljs/solo/spa.cljs","^T",27,"^U",1,"^V",27,"^W",16,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",27,"^U",6,"^V",27,"^W",16],"^[","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$cljs.core/ISet"],"~$reg-ex->str",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",53,"^U",7,"^V",53,"^W",18,"^X",["^Y",["^Z",["^Y",[["~$r"]]]]]],"^A","~$solo.spa/reg-ex->str","^11",false,"^S","src/cljs/solo/spa.cljs","^W",18,"^12",["^Y",[["~$r"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",53,"^V",53,"^15",1,"^16",true,"^X",["^Y",["^Z",["^Y",[["~$r"]]]]]],"~$set-filter-reg-ex!",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",57,"^U",7,"^V",57,"^W",25,"^X",["^Y",["^Z",["^Y",[["~$x"]]]]]],"^A","~$solo.spa/set-filter-reg-ex!","^11",false,"^S","src/cljs/solo/spa.cljs","^W",25,"^12",["^Y",[["~$x"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",57,"^V",57,"^15",1,"^16",true,"^X",["^Y",["^Z",["^Y",[["~$x"]]]]]],"~$top-of-page",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",121,"^U",7,"^V",121,"^W",18,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^A","~$solo.spa/top-of-page","^11",false,"^S","src/cljs/solo/spa.cljs","^W",18,"^12",["^Y",[[]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",121,"^V",121,"^15",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$hide?",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",62,"^U",7,"^V",62,"^W",12,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^A","~$solo.spa/hide?","^11",false,"^S","src/cljs/solo/spa.cljs","^W",12,"^12",["^Y",[[]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",62,"^V",62,"^15",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",44,"^U",7,"^V",44,"^W",20,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^A","~$solo.spa/filter-reg-ex","^11",false,"^S","src/cljs/solo/spa.cljs","^W",20,"^12",["^Y",[[]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",44,"^V",44,"^15",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^[","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$render-loggers",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",201,"^U",16,"^V",201,"^W",30,"~:export",true,"^X",["^Y",["^Z",["^Y",[["~$&","~$_"]]]]],"^[","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form.","^1:",["^ ","^11",true,"^15",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^14",["^Y",[null]]]],"^A","~$solo.spa/render-loggers","^11",true,"^S","src/cljs/solo/spa.cljs","^W",30,"^1:",["^ ","^11",true,"^15",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^14",["^Y",[null]]],"^12",[["^Y",["~$_"]]],"^13",null,"^1S",true,"^14",["^Y",[null]],"^U",1,"^T",201,"^V",201,"^15",0,"^16",true,"^X",["^Y",[["~$&","~$_"]]],"^[","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form."],"~$app-state",["^ ","^A","~$solo.spa/app-state","^S","src/cljs/solo/spa.cljs","^T",39,"^U",1,"^V",39,"^W",19,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",39,"^U",10,"^V",39,"^W",19],"^1F","~$any"],"~$set-log-level!",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",107,"^U",7,"^V",107,"^W",21,"^X",["^Y",["^Z",["^Y",[["~$logger-name","~$log-level"]]]]]],"^A","~$solo.spa/set-log-level!","^11",false,"^S","src/cljs/solo/spa.cljs","^W",21,"^12",["^Y",[["^1Y","^1Z"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",107,"^V",107,"^15",2,"^16",true,"^X",["^Y",["^Z",["^Y",[["^1Y","^1Z"]]]]]],"~$make-options",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",114,"^U",7,"^V",114,"^W",19,"^X",["^Y",["^Z",["^Y",[["^19","~$x"]]]]],"^[","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^A","~$solo.spa/make-options","^11",false,"^S","src/cljs/solo/spa.cljs","^W",19,"^12",["^Y",[["^19","~$x"]]],"^13",null,"^14",["^Y",[null,null]],"^U",1,"^T",114,"^V",114,"^15",2,"^16",true,"^X",["^Y",["^Z",["^Y",[["^19","~$x"]]]]],"^[","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^>","^>","^E","^E"],"~:cljs.analyzer/constants",["^ ","~:seen",["^@",["~:div#top-of-page","~:selected","^B","~:placeholder","~:else","~:log-level","~:ns","^A","~:td","~:value","~:th","^S","~:tr","^W","~:filter-reg-ex","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","^1S","~:on-click","^U","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","^T","~:label","~:id","~:checked","~:declared","^1R","^V","~:table#loggers","~:input","^X","~:on-change","~:body","^[","^1T","~:test","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2B","^1T","^2;","^A","^S","^W","^1S","^U","^T","^2P","^V","^X","^[","^2U","^B","^1R","^2@","^2G","^2J","^2:","^29","^2X","^2T","^2C","^2I","^27","^26","~:a","^2V","^2E","^2M","^2K","^2R","^2D","^2N","^28","^2Y","^2H","^2W","^2F","^2=","^2L","^2Q","^2?","^2>","^2S","^2O","^2<","^2A"]],"^[","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]