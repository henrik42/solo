["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "],"~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^D","~$repl","~$clojure.browser.repl","^F","^F","~$hipo","~$hipo.interpreter","^H","^H","~$gdom","~$goog.dom","^J","^J","~$http","~$cljs-http.client","^L","^L"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^D","~$>!","^D"],"~:defs",["^ ","~$set-log-level",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",103,"~:column",7,"~:end-line",103,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^[",[["~$&","~$_"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",0,"~:method-params",[["^[",["~$_"]]],"^Z",["^[",[["~$&","~$_"]]],"~:arglists-meta",["^[",[null]]]],"^@","~$solo.spa/set-log-level","^12",true,"^U","src/cljs/solo/spa.cljs","^Y",20,"^11",["^ ","^12",true,"^13",0,"^14",[["^[",["~$_"]]],"^Z",["^[",[["~$&","~$_"]]],"^15",["^[",[null]]],"^14",[["^[",["~$_"]]],"~:protocol-impl",null,"^15",["^[",[null]],"^W",1,"^V",103,"^X",103,"^13",0,"~:fn-var",true,"^Z",["^[",[["~$&","~$_"]]]],"~$set-log-level-form",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",133,"^W",7,"^X",133,"^Y",25,"^Z",["^[",["^10",["^[",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^@","~$solo.spa/set-log-level-form","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",25,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",133,"^X",133,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",199,"^W",7,"^X",199,"^Y",11,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such a\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes."],"^@","~$solo.spa/main","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",11,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",199,"^X",199,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such a\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes."],"^4",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",17,"^W",7,"^X",17,"^Y",10,"^Z",["^[",["^10",["^[",[["~$&","~$xs"]]]]],"^1:","Prints to `js/console`.","^11",["^ ","^12",true,"^13",0,"^14",[["^[",["^1>"]]],"^Z",["^[",[["~$&","^1>"]]],"^15",["^[",[null]]]],"^@","~$solo.spa/log","^12",true,"^U","src/cljs/solo/spa.cljs","^Y",10,"^11",["^ ","^12",true,"^13",0,"^14",[["^[",["^1>"]]],"^Z",["^[",[["~$&","^1>"]]],"^15",["^[",[null]]],"^14",[["^[",["^1>"]]],"^17",null,"^15",["^[",[null]],"^W",1,"^V",17,"^X",17,"^13",0,"^18",true,"^Z",["^[",[["~$&","^1>"]]],"^1:","Prints to `js/console`."],"~$set-hide!",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",66,"^W",7,"^X",66,"^Y",16,"^Z",["^[",["^10",["^[",[["~$x"]]]]],"^1:","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^@","~$solo.spa/set-hide!","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",16,"^14",["^[",[["~$x"]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",66,"^X",66,"^13",1,"^18",true,"^Z",["^[",["^10",["^[",[["~$x"]]]]],"^1:","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",77,"^W",7,"^X",77,"^Y",14,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^@","~$solo.spa/loggers","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",14,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",77,"^X",77,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$conn",["^ ","^@","~$solo.spa/conn","^U","src/cljs/solo/spa.cljs","^V",12,"^W",1,"^X",12,"^Y",14,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",12,"^W",10,"^X",12,"^Y",14],"~:tag","~$any"],"~$loggers-form",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",153,"^W",7,"^X",153,"^Y",19,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^@","~$solo.spa/loggers-form","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",19,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",153,"^X",153,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",99,"^W",7,"^X",99,"^Y",27,"^Z",["^[",["^10",["^[",[["~$&","~$_"]]]]],"^11",["^ ","^12",true,"^13",0,"^14",[["^[",["~$_"]]],"^Z",["^[",[["~$&","~$_"]]],"^15",["^[",[null]]]],"^@","~$solo.spa/load-current-loggers","^12",true,"^U","src/cljs/solo/spa.cljs","^Y",27,"^11",["^ ","^12",true,"^13",0,"^14",[["^[",["~$_"]]],"^Z",["^[",[["~$&","~$_"]]],"^15",["^[",[null]]],"^14",[["^[",["~$_"]]],"^17",null,"^15",["^[",[null]],"^W",1,"^V",99,"^X",99,"^13",0,"^18",true,"^Z",["^[",[["~$&","~$_"]]]],"~$log-levels",["^ ","^@","~$solo.spa/log-levels","^U","src/cljs/solo/spa.cljs","^V",23,"^W",1,"^X",23,"^Y",16,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",23,"^W",6,"^X",23,"^Y",16],"^1:","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","^1F","~$cljs.core/ISet"],"~$reg-ex->str",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",50,"^W",7,"^X",50,"^Y",18,"^Z",["^[",["^10",["^[",[["~$r"]]]]]],"^@","~$solo.spa/reg-ex->str","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",18,"^14",["^[",[["~$r"]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",50,"^X",50,"^13",1,"^18",true,"^Z",["^[",["^10",["^[",[["~$r"]]]]]],"~$set-filter-reg-ex!",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",54,"^W",7,"^X",54,"^Y",25,"^Z",["^[",["^10",["^[",[["~$x"]]]]]],"^@","~$solo.spa/set-filter-reg-ex!","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",25,"^14",["^[",[["~$x"]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",54,"^X",54,"^13",1,"^18",true,"^Z",["^[",["^10",["^[",[["~$x"]]]]]],"~$top-of-page",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",119,"^W",7,"^X",119,"^Y",18,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^@","~$solo.spa/top-of-page","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",18,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",119,"^X",119,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$hide?",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",59,"^W",7,"^X",59,"^Y",12,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^@","~$solo.spa/hide?","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",12,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",59,"^X",59,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",41,"^W",7,"^X",41,"^Y",20,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^@","~$solo.spa/filter-reg-ex","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",20,"^14",["^[",[[]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",41,"^X",41,"^13",0,"^18",true,"^Z",["^[",["^10",["^[",[[]]]]],"^1:","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$render-loggers",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",190,"^W",16,"^X",190,"^Y",30,"~:export",true,"^Z",["^[",["^10",["^[",[["~$&","~$_"]]]]],"^1:","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form.","^11",["^ ","^12",true,"^13",0,"^14",[["^[",["~$_"]]],"^Z",["^[",[["~$&","~$_"]]],"^15",["^[",[null]]]],"^@","~$solo.spa/render-loggers","^12",true,"^U","src/cljs/solo/spa.cljs","^Y",30,"^11",["^ ","^12",true,"^13",0,"^14",[["^[",["~$_"]]],"^Z",["^[",[["~$&","~$_"]]],"^15",["^[",[null]]],"^14",[["^[",["~$_"]]],"^17",null,"^1Z",true,"^15",["^[",[null]],"^W",1,"^V",190,"^X",190,"^13",0,"^18",true,"^Z",["^[",[["~$&","~$_"]]],"^1:","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form."],"~$app-state",["^ ","^@","~$solo.spa/app-state","^U","src/cljs/solo/spa.cljs","^V",33,"^W",1,"^X",33,"^Y",15,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",33,"^W",6,"^X",33,"^Y",15],"^1:","THE STATE of the application. Whenever this state changes\n  `render-loggers` will be called to update/(re)-render the GUI.","^1F","^1G"],"~$make-options",["^ ","^S",null,"^T",["^ ","^U","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^V",112,"^W",7,"^X",112,"^Y",19,"^Z",["^[",["^10",["^[",[["^1>","~$x"]]]]],"^1:","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^@","~$solo.spa/make-options","^12",false,"^U","src/cljs/solo/spa.cljs","^Y",19,"^14",["^[",[["^1>","~$x"]]],"^17",null,"^15",["^[",[null,null]],"^W",1,"^V",112,"^X",112,"^13",2,"^18",true,"^Z",["^[",["^10",["^[",[["^1>","~$x"]]]]],"^1:","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^=","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:div#top-of-page","~:selected","^A","~:placeholder","~:else","~:log-level","~:ns","^@","~:td","~:value","~:th","^U","~:tr","^Y","~:filter-reg-ex","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","^1Z","~:on-click","^W","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","^V","~:label","~:id","~:checked","~:declared","^1Y","^X","~:table#loggers","~:input","^Z","~:on-change","~:body","^1:","^1[","~:test","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2D","^1[","^2=","^@","^U","^Y","^1Z","^W","^V","^2R","^X","^Z","^1:","^2W","^A","^1Y","^2B","^2I","^2L","^2<","^2;","^2Z","^2V","^2E","^2K","^29","^28","~:a","^2X","^2G","^2O","^2M","^2T","^2F","^2P","^2:","^2[","^2J","^2Y","^2H","^2?","^2N","^2S","^2A","^2@","^2U","^2Q","^2>","^2C"]],"^1:","A Single Page Application (SPA)."]