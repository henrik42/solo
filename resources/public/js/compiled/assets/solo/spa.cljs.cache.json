["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "],"~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^D","~$repl","~$clojure.browser.repl","^F","^F","~$hipo","~$hipo.interpreter","^H","^H","~$http","~$cljs-http.client","^J","^J"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^D"],"~:defs",["^ ","~$set-log-level-form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",128,"~:column",7,"~:end-line",128,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^X",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^@","~$solo.spa/set-log-level-form","~:variadic",false,"^R","src/cljs/solo/spa.cljs","^V",25,"~:method-params",["^X",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^T",1,"^S",128,"^U",128,"~:max-fixed-arity",0,"~:fn-var",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",203,"^T",7,"^U",203,"^V",11,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^@","~$solo.spa/main","^10",false,"^R","src/cljs/solo/spa.cljs","^V",11,"^11",["^X",[[]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",203,"^U",203,"^14",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^4",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",14,"^T",7,"^U",14,"^V",10,"^W",["^X",["^Y",["^X",[["~$&","~$xs"]]]]],"^Z","Prints to `js/console`.","~:top-fn",["^ ","^10",true,"^14",0,"^11",[["^X",["^18"]]],"^W",["^X",[["~$&","^18"]]],"^13",["^X",[null]]]],"^@","~$solo.spa/log","^10",true,"^R","src/cljs/solo/spa.cljs","^V",10,"^19",["^ ","^10",true,"^14",0,"^11",[["^X",["^18"]]],"^W",["^X",[["~$&","^18"]]],"^13",["^X",[null]]],"^11",[["^X",["^18"]]],"^12",null,"^13",["^X",[null]],"^T",1,"^S",14,"^U",14,"^14",0,"^15",true,"^W",["^X",[["~$&","^18"]]],"^Z","Prints to `js/console`."],"~$set-hide!",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",62,"^T",7,"^U",62,"^V",16,"^W",["^X",["^Y",["^X",[["~$x"]]]]],"^Z","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^@","~$solo.spa/set-hide!","^10",false,"^R","src/cljs/solo/spa.cljs","^V",16,"^11",["^X",[["~$x"]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",62,"^U",62,"^14",1,"^15",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]],"^Z","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",73,"^T",7,"^U",73,"^V",14,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^@","~$solo.spa/loggers","^10",false,"^R","src/cljs/solo/spa.cljs","^V",14,"^11",["^X",[[]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",73,"^U",73,"^14",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",152,"^T",7,"^U",152,"^V",19,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^@","~$solo.spa/loggers-form","^10",false,"^R","src/cljs/solo/spa.cljs","^V",19,"^11",["^X",[[]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",152,"^U",152,"^14",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",95,"^T",7,"^U",95,"^V",27,"^W",["^X",["^Y",["^X",[["~$&","~$_"]]]]],"^19",["^ ","^10",true,"^14",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^13",["^X",[null]]]],"^@","~$solo.spa/load-current-loggers","^10",true,"^R","src/cljs/solo/spa.cljs","^V",27,"^19",["^ ","^10",true,"^14",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^13",["^X",[null]]],"^11",[["^X",["~$_"]]],"^12",null,"^13",["^X",[null]],"^T",1,"^S",95,"^U",95,"^14",0,"^15",true,"^W",["^X",[["~$&","~$_"]]]],"~$log-levels",["^ ","^@","~$solo.spa/log-levels","^R","src/cljs/solo/spa.cljs","^S",20,"^T",1,"^U",20,"^V",16,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",20,"^T",6,"^U",20,"^V",16],"^Z","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$cljs.core/ISet"],"~$reg-ex->str",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",46,"^T",7,"^U",46,"^V",18,"^W",["^X",["^Y",["^X",[["~$r"]]]]]],"^@","~$solo.spa/reg-ex->str","^10",false,"^R","src/cljs/solo/spa.cljs","^V",18,"^11",["^X",[["~$r"]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",46,"^U",46,"^14",1,"^15",true,"^W",["^X",["^Y",["^X",[["~$r"]]]]]],"~$set-filter-reg-ex!",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",50,"^T",7,"^U",50,"^V",25,"^W",["^X",["^Y",["^X",[["~$x"]]]]]],"^@","~$solo.spa/set-filter-reg-ex!","^10",false,"^R","src/cljs/solo/spa.cljs","^V",25,"^11",["^X",[["~$x"]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",50,"^U",50,"^14",1,"^15",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]]],"~$top-of-page",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",114,"^T",7,"^U",114,"^V",18,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^@","~$solo.spa/top-of-page","^10",false,"^R","src/cljs/solo/spa.cljs","^V",18,"^11",["^X",[[]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",114,"^U",114,"^14",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$hide?",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",55,"^T",7,"^U",55,"^V",12,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^@","~$solo.spa/hide?","^10",false,"^R","src/cljs/solo/spa.cljs","^V",12,"^11",["^X",[[]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",55,"^U",55,"^14",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",37,"^T",7,"^U",37,"^V",20,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^@","~$solo.spa/filter-reg-ex","^10",false,"^R","src/cljs/solo/spa.cljs","^V",20,"^11",["^X",[[]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",37,"^U",37,"^14",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^Z","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$render-loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",194,"^T",16,"^U",194,"^V",30,"~:export",true,"^W",["^X",["^Y",["^X",[["~$&","~$_"]]]]],"^Z","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form.","^19",["^ ","^10",true,"^14",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^13",["^X",[null]]]],"^@","~$solo.spa/render-loggers","^10",true,"^R","src/cljs/solo/spa.cljs","^V",30,"^19",["^ ","^10",true,"^14",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^13",["^X",[null]]],"^11",[["^X",["~$_"]]],"^12",null,"^1R",true,"^13",["^X",[null]],"^T",1,"^S",194,"^U",194,"^14",0,"^15",true,"^W",["^X",[["~$&","~$_"]]],"^Z","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form."],"~$app-state",["^ ","^@","~$solo.spa/app-state","^R","src/cljs/solo/spa.cljs","^S",32,"^T",1,"^U",32,"^V",19,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",32,"^T",10,"^U",32,"^V",19],"^1E","~$any"],"~$set-log-level!",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",100,"^T",7,"^U",100,"^V",21,"^W",["^X",["^Y",["^X",[["~$logger-name","~$log-level"]]]]]],"^@","~$solo.spa/set-log-level!","^10",false,"^R","src/cljs/solo/spa.cljs","^V",21,"^11",["^X",[["^1X","^1Y"]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",100,"^U",100,"^14",2,"^15",true,"^W",["^X",["^Y",["^X",[["^1X","^1Y"]]]]]],"~$make-options",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",107,"^T",7,"^U",107,"^V",19,"^W",["^X",["^Y",["^X",[["^18","~$x"]]]]],"^Z","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^@","~$solo.spa/make-options","^10",false,"^R","src/cljs/solo/spa.cljs","^V",19,"^11",["^X",[["^18","~$x"]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",107,"^U",107,"^14",2,"^15",true,"^W",["^X",["^Y",["^X",[["^18","~$x"]]]]],"^Z","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^=","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:div#top-of-page","~:selected","^A","~:placeholder","~:else","~:log-level","~:ns","^@","~:td","~:value","~:th","^R","~:tr","^V","~:filter-reg-ex","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","^1R","~:on-click","^T","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","^S","~:label","~:id","~:checked","~:declared","^1Q","^U","~:table#loggers","~:input","^W","~:on-change","~:body","^Z","^1S","~:test","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2A","^1S","^2:","^@","^R","^V","^1R","^T","^S","^2O","^U","^W","^Z","^2T","^A","^1Q","^2?","^2F","^2I","^29","^28","^2W","^2S","^2B","^2H","^26","^25","~:a","^2U","^2D","^2L","^2J","^2Q","^2C","^2M","^27","^2X","^2G","^2V","^2E","^2<","^2K","^2P","^2>","^2=","^2R","^2N","^2;","^2@"]],"^Z","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]