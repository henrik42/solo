["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$Object",["^ ","~$value",["^ "],"~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^C","~$repl","~$clojure.browser.repl","^E","^E","~$hipo","~$hipo.interpreter","^G","^G","~$http","~$cljs-http.client","^I","^I"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^C","~$>!","^C"],"~:defs",["^ ","~$set-log-level",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",37,"~:column",7,"~:end-line",37,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^X",[["~$&","~$_"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",0,"~:method-params",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"~:arglists-meta",["^X",[null]]]],"^?","~$solo.spa/set-log-level","^[",true,"^R","src/cljs/solo/spa.cljs","^V",20,"^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]],"^11",[["^X",["~$_"]]],"~:protocol-impl",null,"^12",["^X",[null]],"^T",1,"^S",37,"^U",37,"^10",0,"~:fn-var",true,"^W",["^X",[["~$&","~$_"]]]],"~$set-log-level-form",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",67,"^T",7,"^U",67,"^V",25,"^W",["^X",["^Y",["^X",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^?","~$solo.spa/set-log-level-form","^[",false,"^R","src/cljs/solo/spa.cljs","^V",25,"^11",["^X",[[]]],"^14",null,"^12",["^X",[null,null]],"^T",1,"^S",67,"^U",67,"^10",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",130,"^T",7,"^U",130,"^V",11,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Main entry point of the SPA.\n\n  Creates the DOM for the SPA and mounts it at `id=\"main\"`. Then\n  calls `(load-current-loggers)`.\n\n  The `main`-DOM will contain the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers`."],"^?","~$solo.spa/main","^[",false,"^R","src/cljs/solo/spa.cljs","^V",11,"^11",["^X",[[]]],"^14",null,"^12",["^X",[null,null]],"^T",1,"^S",130,"^U",130,"^10",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Main entry point of the SPA.\n\n  Creates the DOM for the SPA and mounts it at `id=\"main\"`. Then\n  calls `(load-current-loggers)`.\n\n  The `main`-DOM will contain the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers`."],"^4",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",13,"^T",7,"^U",13,"^V",10,"^W",["^X",["^Y",["^X",[["~$&","~$xs"]]]]],"^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["^1;"]]],"^W",["^X",[["~$&","^1;"]]],"^12",["^X",[null]]]],"^?","~$solo.spa/log","^[",true,"^R","src/cljs/solo/spa.cljs","^V",10,"^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["^1;"]]],"^W",["^X",[["~$&","^1;"]]],"^12",["^X",[null]]],"^11",[["^X",["^1;"]]],"^14",null,"^12",["^X",[null]],"^T",1,"^S",13,"^U",13,"^10",0,"^15",true,"^W",["^X",[["~$&","^1;"]]]],"~$conn",["^ ","^?","~$solo.spa/conn","^R","src/cljs/solo/spa.cljs","^S",8,"^T",1,"^U",8,"^V",14,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",8,"^T",10,"^U",8,"^V",14],"~:tag","~$any"],"~$loggers-form",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",87,"^T",7,"^U",87,"^V",19,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^?","~$solo.spa/loggers-form","^[",false,"^R","src/cljs/solo/spa.cljs","^V",19,"^11",["^X",[[]]],"^14",null,"^12",["^X",[null,null]],"^T",1,"^S",87,"^U",87,"^10",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",33,"^T",7,"^U",33,"^V",27,"^W",["^X",["^Y",["^X",[["~$&","~$_"]]]]],"^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]]],"^?","~$solo.spa/load-current-loggers","^[",true,"^R","src/cljs/solo/spa.cljs","^V",27,"^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]],"^11",[["^X",["~$_"]]],"^14",null,"^12",["^X",[null]],"^T",1,"^S",33,"^U",33,"^10",0,"^15",true,"^W",["^X",[["~$&","~$_"]]]],"~$log-levels",["^ ","^?","~$solo.spa/log-levels","^R","src/cljs/solo/spa.cljs","^S",16,"^T",1,"^U",16,"^V",16,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",16,"^T",6,"^U",16,"^V",16],"^17","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","^1?","~$cljs.core/ISet"],"~$top-of-page",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",53,"^T",7,"^U",53,"^V",18,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^?","~$solo.spa/top-of-page","^[",false,"^R","src/cljs/solo/spa.cljs","^V",18,"^11",["^X",[[]]],"^14",null,"^12",["^X",[null,null]],"^T",1,"^S",53,"^U",53,"^10",0,"^15",true,"^W",["^X",["^Y",["^X",[[]]]]],"^17","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$render-loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",121,"^T",16,"^U",121,"^V",30,"~:export",true,"^W",["^X",["^Y",["^X",[["~$&","~$_"]]]]],"^17","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`.","^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]]],"^?","~$solo.spa/render-loggers","^[",true,"^R","src/cljs/solo/spa.cljs","^V",30,"^Z",["^ ","^[",true,"^10",0,"^11",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]],"^11",[["^X",["~$_"]]],"^14",null,"^1K",true,"^12",["^X",[null]],"^T",1,"^S",121,"^U",121,"^10",0,"^15",true,"^W",["^X",[["~$&","~$_"]]],"^17","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`."],"~$app-state",["^ ","^?","~$solo.spa/app-state","^R","src/cljs/solo/spa.cljs","^S",26,"^T",1,"^U",26,"^V",15,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",26,"^T",6,"^U",26,"^V",15],"^1?","^1@"],"~$make-options",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",46,"^T",7,"^U",46,"^V",19,"^W",["^X",["^Y",["^X",[["^1;","~$x"]]]]],"^17","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^?","~$solo.spa/make-options","^[",false,"^R","src/cljs/solo/spa.cljs","^V",19,"^11",["^X",[["^1;","~$x"]]],"^14",null,"^12",["^X",[null,null]],"^T",1,"^S",46,"^U",46,"^10",2,"^15",true,"^W",["^X",["^Y",["^X",[["^1;","~$x"]]]]],"^17","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^C"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:div#top-of-page","~:selected","^@","~:placeholder","~:else","~:log-level","~:ns","^?","~:td","~:value","~:th","^R","~:tr","^V","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","^1K","~:on-click","^T","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","^S","~:label","~:id","~:checked","~:declared","^1J","^U","~:table#loggers","~:input","^W","~:body","^17","^1L","~:test","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^24","^1L","^1Z","^?","^R","^V","^1K","^T","^S","^2B","^U","^W","^17","^2F","^@","^1J","^2E","^2I","^25","^1X","^2;","^1V","^1U","~:a","^2G","^27","^2?","^2=","^2D","^26","^2@","^1W","^2J","^2:","^2H","^28","^20","^2>","^2C","^22","^21","^2A","^29","^2<","^1Y","^1[","^23"]],"^17",null]