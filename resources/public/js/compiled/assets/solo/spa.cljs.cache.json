["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^C","~$r","~$reagent.core","^D","^D","~$http","~$cljs-http.client","^F","^F","~$fokus","~$fokus.fokus","^H","^H","~$sysprops","~$solo.spa.sysprops","^J","^J"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^C"],"~:defs",["^ ","~$navigation-widget",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",290,"~:column",7,"~:end-line",290,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^X",[[]]]]]],"^?","~$solo.spa/navigation-widget","~:variadic",false,"^R","src/cljs/solo/spa.cljs","^V",24,"~:method-params",["^X",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^T",1,"^S",290,"^U",290,"~:max-fixed-arity",0,"~:fn-var",true,"^W",["^X",["^Y",["^X",[[]]]]]],"~$set-log-level-form",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",170,"^T",7,"^U",170,"^V",25,"^W",["^X",["^Y",["^X",[[]]]]],"~:doc","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^?","~$solo.spa/set-log-level-form","^[",false,"^R","src/cljs/solo/spa.cljs","^V",25,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",170,"^U",170,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns a Reagent-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",301,"^T",7,"^U",301,"^V",11,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^?","~$solo.spa/main","^[",false,"^R","src/cljs/solo/spa.cljs","^V",11,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",301,"^U",301,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such an\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  Note: this function builds a DOM-node with `id=\"main\"` __at__ the\n  node with `id=\"main\"`. So this function can be called\n  __repeatedly__! That's important if you want to be able to\n  __reload__ this namespace and to re-run `(main)`."],"^4",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",18,"^T",7,"^U",18,"^V",10,"^W",["^X",["^Y",["^X",[["~$&","~$xs"]]]]],"^16","Prints `xs` to `js/console`.","~:top-fn",["^ ","^[",true,"^13",0,"^10",[["^X",["^1:"]]],"^W",["^X",[["~$&","^1:"]]],"^12",["^X",[null]]]],"^?","~$solo.spa/log","^[",true,"^R","src/cljs/solo/spa.cljs","^V",10,"^1;",["^ ","^[",true,"^13",0,"^10",[["^X",["^1:"]]],"^W",["^X",[["~$&","^1:"]]],"^12",["^X",[null]]],"^10",[["^X",["^1:"]]],"^11",null,"^12",["^X",[null]],"^T",1,"^S",18,"^U",18,"^13",0,"^14",true,"^W",["^X",[["~$&","^1:"]]],"^16","Prints `xs` to `js/console`."],"~$current-page",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",277,"^T",7,"^U",277,"^V",19,"^W",["^X",["^Y",["^X",[[]]]]]],"^?","~$solo.spa/current-page","^[",false,"^R","src/cljs/solo/spa.cljs","^V",19,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",277,"^U",277,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]]],"~$set-hide!",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",84,"^T",7,"^U",84,"^V",16,"^W",["^X",["^Y",["^X",[["~$x"]]]]],"^16","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-hide!","^[",false,"^R","src/cljs/solo/spa.cljs","^V",16,"^10",["^X",[["~$x"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",84,"^U",84,"^13",1,"^14",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]],"^16","Eventlistener that sets the `app-state`'s `:hide`-value to the\n  current `-checked`-value of the checkbox (i.e. the event\n  target). Call with a `boolean` to set the `app-state`'s\n  `:hide`-value. Returns the new `app-state`."],"~$loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",96,"^T",7,"^U",96,"^V",14,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^?","~$solo.spa/loggers","^[",false,"^R","src/cljs/solo/spa.cljs","^V",14,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",96,"^U",96,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns the `app-state`'s `:loggers` (a _map-seq_). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$loggers-form",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",219,"^T",7,"^U",219,"^V",19,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^?","~$solo.spa/loggers-form","^[",false,"^R","src/cljs/solo/spa.cljs","^V",19,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",219,"^U",219,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns a Reagent-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",112,"^T",7,"^U",112,"^V",27,"^W",["^X",["^Y",["^X",[["~$&","~$_"]]]]],"^16","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing.","^1;",["^ ","^[",true,"^13",0,"^10",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]]],"^?","~$solo.spa/load-current-loggers","^[",true,"^R","src/cljs/solo/spa.cljs","^V",27,"^1;",["^ ","^[",true,"^13",0,"^10",[["^X",["~$_"]]],"^W",["^X",[["~$&","~$_"]]],"^12",["^X",[null]]],"^10",[["^X",["~$_"]]],"^11",null,"^12",["^X",[null]],"^T",1,"^S",112,"^U",112,"^13",0,"^14",true,"^W",["^X",[["~$&","~$_"]]],"^16","Eventlistener that calls the web-service `ws/get-current-loggers`\n  and sets the `app-state`'s\n  `:loggers`-value. Call `(load-current-loggers)` from the REPL for\n  testing."],"~$table-row",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",202,"^T",7,"^U",202,"^V",16,"^W",["^X",["^Y",["^X",[["~$logger-name","~$log-level"]]]]],"^16","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(log-level-options\n  log-levels)` and value `log-level`. Selecting a log-level will fire\n  an event and call `set-log-level`."],"^?","~$solo.spa/table-row","^[",false,"^R","src/cljs/solo/spa.cljs","^V",16,"^10",["^X",[["^1H","^1I"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",202,"^U",202,"^13",2,"^14",true,"^W",["^X",["^Y",["^X",[["^1H","^1I"]]]]],"^16","Reagent `tr` (\"table-row\") component. The table-row contains the\n  `logger-name` and a drop-down `:select` with `(log-level-options\n  log-levels)` and value `log-level`. Selecting a log-level will fire\n  an event and call `set-log-level`."],"~$log-levels",["^ ","^?","~$solo.spa/log-levels","^R","src/cljs/solo/spa.cljs","^S",30,"^T",1,"^U",30,"^V",16,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",30,"^T",6,"^U",30,"^V",16],"^16","The set of all known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","~:tag","~$any"],"~$reg-ex->str",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",57,"^T",7,"^U",57,"^V",18,"^W",["^X",["^Y",["^X",[["~$r"]]]]],"^16","Returns the `String` representation of the given reg-ex for\n  presentation."],"^?","~$solo.spa/reg-ex->str","^[",false,"^R","src/cljs/solo/spa.cljs","^V",18,"^10",["^X",[["~$r"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",57,"^U",57,"^13",1,"^14",true,"^W",["^X",["^Y",["^X",[["~$r"]]]]],"^16","Returns the `String` representation of the given reg-ex for\n  presentation."],"~$set-filter-reg-ex!",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",65,"^T",7,"^U",65,"^V",25,"^W",["^X",["^Y",["^X",[["~$x"]]]]],"^16","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"^?","~$solo.spa/set-filter-reg-ex!","^[",false,"^R","src/cljs/solo/spa.cljs","^V",25,"^10",["^X",[["~$x"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",65,"^U",65,"^13",1,"^14",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]],"^16","Eventlistener that sets the `app-state`'s `:filter-reg-ex`-value to\n  the current `-value` of the textfield (i.e. the event target). Call\n  with a `String` to set the `app-state`'s\n  `:filter-reg-ex`-value. Returns the new `app-state`."],"~$top-of-page",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",155,"^T",7,"^U",155,"^V",18,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"^?","~$solo.spa/top-of-page","^[",false,"^R","src/cljs/solo/spa.cljs","^V",18,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",155,"^U",155,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns a Reagent-vector for the top-of-page including a link to\n  the Codox-generated API (HTML) documentation, the\n  Marginalia-formatted code (both contained in _Solo_) and a link to\n  the _Solo_ github page."],"~$hide?",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",77,"^T",7,"^U",77,"^V",12,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^?","~$solo.spa/hide?","^[",false,"^R","src/cljs/solo/spa.cljs","^V",12,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",77,"^U",77,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",48,"^T",7,"^U",48,"^V",20,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^?","~$solo.spa/filter-reg-ex","^[",false,"^R","src/cljs/solo/spa.cljs","^V",20,"^10",["^X",[[]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",48,"^U",48,"^13",0,"^14",true,"^W",["^X",["^Y",["^X",[[]]]]],"^16","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$log-level-options",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",135,"^T",7,"^U",135,"^V",24,"^W",["^X",["^Y",["^X",[["^1:"]]]]],"^16","Reagent `:option` component. Entries which are in `non-log-levels`\n  will be `disabled`."],"^?","~$solo.spa/log-level-options","^[",false,"^R","src/cljs/solo/spa.cljs","^V",24,"^10",["^X",[["^1:"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",135,"^U",135,"^13",1,"^14",true,"^W",["^X",["^Y",["^X",[["^1:"]]]]],"^16","Reagent `:option` component. Entries which are in `non-log-levels`\n  will be `disabled`."],"~$navigate-to",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",287,"^T",7,"^U",287,"^V",18,"^W",["^X",["^Y",["^X",[["~$p"]]]]]],"^?","~$solo.spa/navigate-to","^[",false,"^R","src/cljs/solo/spa.cljs","^V",18,"^10",["^X",[["~$p"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",287,"^U",287,"^13",1,"^14",true,"^W",["^X",["^Y",["^X",[["~$p"]]]]]],"~$app-state",["^ ","^?","~$solo.spa/app-state","^R","src/cljs/solo/spa.cljs","^S",41,"^T",1,"^U",41,"^V",19,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",41,"^T",10,"^U",41,"^V",19],"^1M","^1N"],"~$non-log-levels",["^ ","^?","~$solo.spa/non-log-levels","^R","src/cljs/solo/spa.cljs","^S",24,"^T",1,"^U",24,"^V",20,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",24,"^T",6,"^U",24,"^V",20],"^16","Log-Levels that are needed for presenting log-levels for loggers\n  with `UNKNOWN!` log-level and for log-levels that are `NOT-SET!`.","^1M","~$cljs.core/ISet"],"~$set-log-level!",["^ ","^P",null,"^Q",["^ ","^R","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^S",123,"^T",7,"^U",123,"^V",21,"^W",["^X",["^Y",["^X",[["^1H","^1I"]]]]],"^16","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."],"^?","~$solo.spa/set-log-level!","^[",false,"^R","src/cljs/solo/spa.cljs","^V",21,"^10",["^X",[["^1H","^1I"]]],"^11",null,"^12",["^X",[null,null]],"^T",1,"^S",123,"^U",123,"^13",2,"^14",true,"^W",["^X",["^Y",["^X",[["^1H","^1I"]]]]],"^16","Calls the web-service `ws/set-log-level/<logger-name>/<log-level>`\n  and triggers an update of the GUI by finally\n  calling `(load-current-loggers)`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^C","~$r","^D","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:thead","~:div#top-of-page","~:tbody","~:table","~:key","~:placeholder","~:disabled","~:else","~:log-level","~:tfoot>tr>td","~:float","~:td","~:value","~:th","~:tr","~:default-value","~:filter-reg-ex","~:div#main","~:recur","~:type","~:div#new-logger","~:on-click","~:hide","~:style","~:option","~:logger-name","~:for","~:log4j","~:sysprops","~:label","~:id","~:td>select","~:padding","~:checked","~:col-span","~:input","~:on-change","~:body","~:current-page","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2L","^2R","^2U","^2D","^39","^35","^2N","^2C","^2T","^2H","^2B","^2@","^2=","~:a","^37","^2P","^2Y","^2V","^33","^2O","^2Z","^2A","^3:","^2S","^30","^38","^2K","^2Q","^2J","^2G","^2[","^34","^2?","^2<","^2I","^2F","^31","^2>","^2E","^32","^36","^2W","^2X","^2M"]],"^16","A Single Page Application (SPA).\n\n   Note: When using Figwheel for development this namespace may be\n   loaded repeatedly -- i.e. more than once. So loading this namespace\n   must not _destroy_ the application state. See [[app-state]]."]