["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$Object",["^ ","~$replaceWith",["^ "],"~$value",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$alt!","^<"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$goog.dom","^D","~$dom","^D","~$hipo-i","~$hipo.interpreter","~$clojure.browser.repl","^H","~$cljs-http.client","^I","~$cljs.core.async","^J","~$events","~$goog.events","~$repl","^H","^L","^L","^G","^G","~$http","^I"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$timeout","^J","~$<!","^J","~$chan","^J","~$>!","^J","~$put!","^J"],"~:defs",["^ ","~$set-log-level",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",124,"~:column",7,"~:end-line",124,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^14",[["~$&","~$_"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",0,"~:method-params",[["^14",["~$_"]]],"^13",["^14",[["~$&","~$_"]]],"~:arglists-meta",["^14",[null]]]],"^@","~$solo.spa/set-log-level","^17",true,"^Z","src/cljs/solo/spa.cljs","^12",20,"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["~$_"]]],"^13",["^14",[["~$&","~$_"]]],"^1:",["^14",[null]]],"^19",[["^14",["~$_"]]],"~:protocol-impl",null,"^1:",["^14",[null]],"^10",1,"^[",124,"^11",124,"^18",0,"~:fn-var",true,"^13",["^14",[["~$&","~$_"]]]],"~$set-log-level-form",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",55,"^10",7,"^11",55,"^12",25,"^13",["^14",["^15",["^14",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^@","~$solo.spa/set-log-level-form","^17",false,"^Z","src/cljs/solo/spa.cljs","^12",25,"^19",["^14",[[]]],"^1<",null,"^1:",["^14",[null,null]],"^10",1,"^[",55,"^11",55,"^18",0,"^1=",true,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^4",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",23,"^10",7,"^11",23,"^12",10,"^13",["^14",["^15",["^14",[["~$&","~$xs"]]]]],"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["^1A"]]],"^13",["^14",[["~$&","^1A"]]],"^1:",["^14",[null]]]],"^@","~$solo.spa/log","^17",true,"^Z","src/cljs/solo/spa.cljs","^12",10,"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["^1A"]]],"^13",["^14",[["~$&","^1A"]]],"^1:",["^14",[null]]],"^19",[["^14",["^1A"]]],"^1<",null,"^1:",["^14",[null]],"^10",1,"^[",23,"^11",23,"^18",0,"^1=",true,"^13",["^14",[["~$&","^1A"]]]],"~$conn",["^ ","^@","~$solo.spa/conn","^Z","src/cljs/solo/spa.cljs","^[",14,"^10",1,"^11",14,"^12",14,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",14,"^10",10,"^11",14,"^12",14],"~:tag","~$any"],"~$loggers-form",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",77,"^10",7,"^11",77,"^12",19,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^@","~$solo.spa/loggers-form","^17",false,"^Z","src/cljs/solo/spa.cljs","^12",19,"^19",["^14",[[]]],"^1<",null,"^1:",["^14",[null,null]],"^10",1,"^[",77,"^11",77,"^18",0,"^1=",true,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",114,"^10",7,"^11",114,"^12",27,"^13",["^14",["^15",["^14",[["~$&","~$_"]]]]],"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["~$_"]]],"^13",["^14",[["~$&","~$_"]]],"^1:",["^14",[null]]]],"^@","~$solo.spa/load-current-loggers","^17",true,"^Z","src/cljs/solo/spa.cljs","^12",27,"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["~$_"]]],"^13",["^14",[["~$&","~$_"]]],"^1:",["^14",[null]]],"^19",[["^14",["~$_"]]],"^1<",null,"^1:",["^14",[null]],"^10",1,"^[",114,"^11",114,"^18",0,"^1=",true,"^13",["^14",[["~$&","~$_"]]]],"~$log-levels",["^ ","^@","~$solo.spa/log-levels","^Z","src/cljs/solo/spa.cljs","^[",26,"^10",1,"^11",26,"^12",16,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",26,"^10",6,"^11",26,"^12",16],"^1?","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","^1E","~$cljs.core/ISet"],"~$top-of-page",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",41,"^10",7,"^11",41,"^12",18,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^@","~$solo.spa/top-of-page","^17",false,"^Z","src/cljs/solo/spa.cljs","^12",18,"^19",["^14",[[]]],"^1<",null,"^1:",["^14",[null,null]],"^10",1,"^[",41,"^11",41,"^18",0,"^1=",true,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$main!",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",132,"^10",7,"^11",132,"^12",12,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Main entry point of the SPA.\n\n  Call this function to create the DOM for the SPA and to populate and\n  render/mount the inital app-state at `id` `main`."],"^@","~$solo.spa/main!","^17",false,"^Z","src/cljs/solo/spa.cljs","^12",12,"^19",["^14",[[]]],"^1<",null,"^1:",["^14",[null,null]],"^10",1,"^[",132,"^11",132,"^18",0,"^1=",true,"^13",["^14",["^15",["^14",[[]]]]],"^1?","Main entry point of the SPA.\n\n  Call this function to create the DOM for the SPA and to populate and\n  render/mount the inital app-state at `id` `main`."],"~$render-loggers",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",118,"^10",7,"^11",118,"^12",21,"^13",["^14",["^15",["^14",[["~$&","~$_"]]]]],"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["~$_"]]],"^13",["^14",[["~$&","~$_"]]],"^1:",["^14",[null]]]],"^@","~$solo.spa/render-loggers","^17",true,"^Z","src/cljs/solo/spa.cljs","^12",21,"^16",["^ ","^17",true,"^18",0,"^19",[["^14",["~$_"]]],"^13",["^14",[["~$&","~$_"]]],"^1:",["^14",[null]]],"^19",[["^14",["~$_"]]],"^1<",null,"^1:",["^14",[null]],"^10",1,"^[",118,"^11",118,"^18",0,"^1=",true,"^13",["^14",[["~$&","~$_"]]]],"~$app-state",["^ ","^@","~$solo.spa/app-state","^Z","src/cljs/solo/spa.cljs","^[",21,"^10",1,"^11",21,"^12",15,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",21,"^10",6,"^11",21,"^12",15],"^1E","^1F"],"~$make-options",["^ ","^X",null,"^Y",["^ ","^Z","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^[",32,"^10",7,"^11",32,"^12",19,"^13",["^14",["^15",["^14",[["^1A","~$x"]]]]],"^1?","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^@","~$solo.spa/make-options","^17",false,"^Z","src/cljs/solo/spa.cljs","^12",19,"^19",["^14",[["^1A","~$x"]]],"^1<",null,"^1:",["^14",[null,null]],"^10",1,"^[",32,"^11",32,"^18",2,"^1=",true,"^13",["^14",["^15",["^14",[["^1A","~$x"]]]]],"^1?","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^J","^J"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:div#top-of-page","~:selected","~:placeholder","~:else","~:log-level","~:td","~:value","~:th","~:tr","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","~:label","~:id","~:checked","~:table#loggers","~:input","~:body","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2@","^21","^20","~:a","^2J","^2=","^2D","^2B","^2H","^2<","^2E","^22","^2M","^2?","^2K","^26","^2C","^2G","^28","^27","^2F","^2>","^2A","^24","^25","^2L","^2I","^2;","^23","^29","^2:"]],"^1?",null]