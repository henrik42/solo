["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$console",["^ ","~$log",["^ "]],"~$RegExp",["^ "],"~$Object",["^ ","~$value",["^ "],"~$replaceWith",["^ "]],"~$document",["^ ","~$getElementById",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$solo.spa","~:imports",null,"~:requires",["^ ","~$cljs.core.async","^D","~$repl","~$clojure.browser.repl","^F","^F","~$hipo","~$hipo.interpreter","^H","^H","~$http","~$cljs-http.client","^J","^J"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^D","~$>!","^D"],"~:defs",["^ ","~$set-log-level",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","~:line",88,"~:column",7,"~:end-line",88,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^Y",[["~$&","~$_"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",0,"~:method-params",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"~:arglists-meta",["^Y",[null]]]],"^@","~$solo.spa/set-log-level","^10",true,"^S","src/cljs/solo/spa.cljs","^W",20,"^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^13",["^Y",[null]]],"^12",[["^Y",["~$_"]]],"~:protocol-impl",null,"^13",["^Y",[null]],"^U",1,"^T",88,"^V",88,"^11",0,"~:fn-var",true,"^X",["^Y",[["~$&","~$_"]]]],"~$set-log-level-form",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",118,"^U",7,"^V",118,"^W",25,"^X",["^Y",["^Z",["^Y",[[]]]]],"~:doc","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"^@","~$solo.spa/set-log-level-form","^10",false,"^S","src/cljs/solo/spa.cljs","^W",25,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",118,"^V",118,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns a Hiccup-vector for the *set log-level form* which allows\n  the user to enter a logger-name and select a log-level."],"~$main",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",182,"^U",7,"^V",182,"^W",11,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such a\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes."],"^@","~$solo.spa/main","^10",false,"^S","src/cljs/solo/spa.cljs","^W",11,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",182,"^V",182,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Main entry point of the SPA.\n\n  Creates the `main`-DOM for the SPA and mounts it in the current DOM\n  at `id=\"main\"`. So the initial hosting page must contain such a\n  `id=\"main\"-node. Then calls `(load-current-loggers)`.\n\n  The `main`-DOM contains the `(loggers-form)`-DOM with\n  `id=\"loggers-form\"` so that this sub-DOM can be _updated_ via\n  `render-loggers` whenever the `app-state` changes."],"^4",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",16,"^U",7,"^V",16,"^W",10,"^X",["^Y",["^Z",["^Y",[["~$&","~$xs"]]]]],"^18","Prints to `js/console`.","^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["^1<"]]],"^X",["^Y",[["~$&","^1<"]]],"^13",["^Y",[null]]]],"^@","~$solo.spa/log","^10",true,"^S","src/cljs/solo/spa.cljs","^W",10,"^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["^1<"]]],"^X",["^Y",[["~$&","^1<"]]],"^13",["^Y",[null]]],"^12",[["^Y",["^1<"]]],"^15",null,"^13",["^Y",[null]],"^U",1,"^T",16,"^V",16,"^11",0,"^16",true,"^X",["^Y",[["~$&","^1<"]]],"^18","Prints to `js/console`."],"~$set-hide!",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",56,"^U",7,"^V",56,"^W",16,"^X",["^Y",["^Z",["^Y",[["~$e"]]]]],"^18","Sets the `app-state`'s `:hide`."],"^@","~$solo.spa/set-hide!","^10",false,"^S","src/cljs/solo/spa.cljs","^W",16,"^12",["^Y",[["~$e"]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",56,"^V",56,"^11",1,"^16",true,"^X",["^Y",["^Z",["^Y",[["~$e"]]]]],"^18","Sets the `app-state`'s `:hide`."],"~$loggers",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",62,"^U",7,"^V",62,"^W",14,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns the `app-state`'s `:loggers` (map-seq). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"^@","~$solo.spa/loggers","^10",false,"^S","src/cljs/solo/spa.cljs","^W",14,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",62,"^V",62,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns the `app-state`'s `:loggers` (map-seq). If `(hide?)` is\n  truthy loggers with `:log-level \"NOT-SET!\" will be filtered out."],"~$conn",["^ ","^@","~$solo.spa/conn","^S","src/cljs/solo/spa.cljs","^T",11,"^U",1,"^V",11,"^W",14,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",11,"^U",10,"^V",11,"^W",14],"~:tag","~$any"],"~$loggers-form",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",138,"^U",7,"^V",138,"^W",19,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"^@","~$solo.spa/loggers-form","^10",false,"^S","src/cljs/solo/spa.cljs","^W",19,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",138,"^V",138,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns a Hiccup-vector for the *loggers form* which allows the\n  user to select a log-level for each of the `loggers`. Within this\n  form the user may also enter a `filter-reg-ex` (which will be used\n  to `re-find`-match loggers by their `:logger-name`) and check-select\n  to hide loggers with `(= log-level NOT-SET!)`."],"~$load-current-loggers",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",84,"^U",7,"^V",84,"^W",27,"^X",["^Y",["^Z",["^Y",[["~$&","~$_"]]]]],"^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^13",["^Y",[null]]]],"^@","~$solo.spa/load-current-loggers","^10",true,"^S","src/cljs/solo/spa.cljs","^W",27,"^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^13",["^Y",[null]]],"^12",[["^Y",["~$_"]]],"^15",null,"^13",["^Y",[null]],"^U",1,"^T",84,"^V",84,"^11",0,"^16",true,"^X",["^Y",[["~$&","~$_"]]]],"~$log-levels",["^ ","^@","~$solo.spa/log-levels","^S","src/cljs/solo/spa.cljs","^T",22,"^U",1,"^V",22,"^W",16,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",22,"^U",6,"^V",22,"^W",16],"^18","The set of known log-levels (incl. `\"UNKNOWN!\"` and\n    `\"NOT-SET!\"`).","^1D","~$cljs.core/ISet"],"~$top-of-page",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",104,"^U",7,"^V",104,"^W",18,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"^@","~$solo.spa/top-of-page","^10",false,"^S","src/cljs/solo/spa.cljs","^W",18,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",104,"^V",104,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns a Hiccup-vector for the top-of-page including a link to the\n  Codox-generated API (HTML) documentation, the Marginalia-formatted\n  code (both contained in _Solo_) and a link to the _Solo_ github\n  page."],"~$hide?",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",49,"^U",7,"^V",49,"^W",12,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"^@","~$solo.spa/hide?","^10",false,"^S","src/cljs/solo/spa.cljs","^W",12,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",49,"^V",49,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns the `app-state`'s `:hide` (`boolean`). Returns `false` if\n  the `:hide` is empty/not-set. Never returns `nil`."],"~$filter-reg-ex",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",40,"^U",7,"^V",40,"^W",20,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"^@","~$solo.spa/filter-reg-ex","^10",false,"^S","src/cljs/solo/spa.cljs","^W",20,"^12",["^Y",[[]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",40,"^V",40,"^11",0,"^16",true,"^X",["^Y",["^Z",["^Y",[[]]]]],"^18","Returns the `app-state`'s `:filter-reg-ex` (`js/RegExp`). Returns\n  `#\".*\"` if the `:filter-reg-ex` is empty/not-set or not a valid\n  `js/RegExp` expression. Never returns `nil`."],"~$render-loggers",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",173,"^U",16,"^V",173,"^W",30,"~:export",true,"^X",["^Y",["^Z",["^Y",[["~$&","~$_"]]]]],"^18","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form.","^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^13",["^Y",[null]]]],"^@","~$solo.spa/render-loggers","^10",true,"^S","src/cljs/solo/spa.cljs","^W",30,"^[",["^ ","^10",true,"^11",0,"^12",[["^Y",["~$_"]]],"^X",["^Y",[["~$&","~$_"]]],"^13",["^Y",[null]]],"^12",[["^Y",["~$_"]]],"^15",null,"^1T",true,"^13",["^Y",[null]],"^U",1,"^T",173,"^V",173,"^11",0,"^16",true,"^X",["^Y",[["~$&","~$_"]]],"^18","Creates the DOM for `(loggers-form)` and mounts it at\n  `id=\"loggers-form\"`. So this (re)renders the loggers-form."],"~$app-state",["^ ","^@","~$solo.spa/app-state","^S","src/cljs/solo/spa.cljs","^T",32,"^U",1,"^V",32,"^W",15,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",32,"^U",6,"^V",32,"^W",15],"^18","THE STATE of the application. Whenever this state changes\n  `render-loggers` will be called to update/(re)-render the GUI.","^1D","^1E"],"~$make-options",["^ ","^Q",null,"^R",["^ ","^S","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa.cljs","^T",97,"^U",7,"^V",97,"^W",19,"^X",["^Y",["^Z",["^Y",[["^1<","~$x"]]]]],"^18","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."],"^@","~$solo.spa/make-options","^10",false,"^S","src/cljs/solo/spa.cljs","^W",19,"^12",["^Y",[["^1<","~$x"]]],"^15",null,"^13",["^Y",[null,null]],"^U",1,"^T",97,"^V",97,"^11",2,"^16",true,"^X",["^Y",["^Z",["^Y",[["^1<","~$x"]]]]],"^18","Returns `:option` Hiccup-vector-seq for `xs`. If `(= x o)` for\n  entry `o` of `xs` then `:selected` is `true`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^=","^=","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^?",["~:div#top-of-page","~:selected","^A","~:placeholder","~:else","~:log-level","~:ns","^@","~:td","~:value","~:th","^S","~:tr","^W","~:filter-reg-ex","~:div#main","~:i-need-no-key","~:recur","~:type","~:div#new-logger","^1T","~:on-click","^U","~:hide","~:style","~:option","~:logger-name","~:for","~:div#loggers-form","^T","~:label","~:id","~:checked","~:declared","^1S","^V","~:table#loggers","~:input","^X","~:on-change","~:body","^18","^1U","~:test","~:href","~:a","~:select","~:loggers","~:span"]],"~:order",["^2>","^1U","^27","^@","^S","^W","^1T","^U","^T","^2L","^V","^X","^18","^2Q","^A","^1S","^2<","^2C","^2F","^26","^25","^2T","^2P","^2?","^2E","^23","^22","~:a","^2R","^2A","^2I","^2G","^2N","^2@","^2J","^24","^2U","^2D","^2S","^2B","^29","^2H","^2M","^2;","^2:","^2O","^2K","^28","^2="]],"^18","A Single Page Application (SPA)."]