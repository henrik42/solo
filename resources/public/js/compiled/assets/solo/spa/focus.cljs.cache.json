["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$solo.spa.focus","~:imports",null,"~:requires",["^ ","~$r","~$reagent.core","^9","^9"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$!focus-targets",["^ ","^5","~$solo.spa.focus/!focus-targets","~:file","src/cljs/solo/spa/focus.cljs","~:line",17,"~:column",1,"~:end-line",17,"~:end-column",20,"~:meta",["^ ","^?","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/focus.cljs","^@",17,"^A",6,"^B",17,"^C",20],"~:doc","Atom (map) thats maps target ids (keyword) to DOM nodes (not\n  Reagent component node!).\n\n  Note: there is only one global atom. Use namespaced keywords to\n  prevent key collisions.","~:tag","~$any"],"~$!focused-target",["^ ","^5","~$solo.spa.focus/!focused-target","^?","src/cljs/solo/spa/focus.cljs","^@",26,"^A",1,"^B",26,"^C",21,"^D",["^ ","^?","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/focus.cljs","^@",26,"^A",6,"^B",26,"^C",21],"^E","Atom that holds the _focused_ target's id (keyword).","^F","^G"],"~$register-focus-target",["^ ","^5","~$solo.spa.focus/register-focus-target","^?","src/cljs/solo/spa/focus.cljs","^@",31,"^A",1,"^B",31,"^C",27,"^D",["^ ","^?","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/focus.cljs","^@",31,"^A",6,"^B",31,"^C",27],"^E","Memoized function that returns a Reagent component function for\n  `target`. The returned value has meta `:component-did-mount`\n  function which handles the focus for `target`. The Reagent component\n  function just returns its arguments as a vector.","^F","^G"],"~$set-focus",["^ ","~:protocol-inline",null,"^D",["^ ","^?","/media/893f8471-5c13-40c1-8b8b-5ca0df2e3866/home/user/Documents/clojure-101/from-zero-to-hero/solo-project/src/cljs/solo/spa/focus.cljs","^@",49,"^A",7,"^B",49,"^C",16,"~:arglists",["~#list",["~$quote",["^O",[["~$target"]]]]],"^E","Sets the focus to `target`."],"^5","~$solo.spa.focus/set-focus","~:variadic",false,"^?","src/cljs/solo/spa/focus.cljs","^C",16,"~:method-params",["^O",[["^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^A",1,"^@",49,"^B",49,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^E","Sets the focus to `target`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$r","^9","^9","^9"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:component-did-mount"]],"~:order",["^11"]],"^E","Focus handling for Reagent components.\n\n   Use `[(focus/register-focus-target ::<key>) ,,,]` to register\n   Reagent components for focusing.\n\n   Example:\n\n           [(focus/register-focus-target ::add)\n            :input {:type \"submit\"\n                    :value \"ADD\"}]\n\n   Then set focus with `(focus/set-focus ::<key>)`."]